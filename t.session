let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <C-Space> 
imap <Nul> <C-Space>
inoremap <expr> <Up> pumvisible() ? "\" : "\<Up>"
inoremap <expr> <S-Tab> pumvisible() ? "\" : "\<S-Tab>"
inoremap <expr> <Down> pumvisible() ? "\" : "\<Down>"
inoremap <C-CR> A;
imap <F5> <Plug>ToggleBackground
inoremap <silent> <F21> :silent doautocmd <nomodeline> FocusGained %
inoremap <silent> <F20> :silent doautocmd <nomodeline> FocusLost %
cnoremap <silent> <F21> eterminus#private#focus_gained()
cnoremap <silent> <F20> eterminus#private#focus_lost()
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <expr> <Plug>delimitMateS-BS delimitMate#WithinEmptyPair() ? "\<Del>" : "\<S-BS>"
inoremap <silent> <Plug>delimitMateBS =delimitMate#BS()
inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()
inoremap <Plug>TComment_9 :call tcomment#SetOption("count", 9)
inoremap <Plug>TComment_8 :call tcomment#SetOption("count", 8)
inoremap <Plug>TComment_7 :call tcomment#SetOption("count", 7)
inoremap <Plug>TComment_6 :call tcomment#SetOption("count", 6)
inoremap <Plug>TComment_5 :call tcomment#SetOption("count", 5)
inoremap <Plug>TComment_4 :call tcomment#SetOption("count", 4)
inoremap <Plug>TComment_3 :call tcomment#SetOption("count", 3)
inoremap <Plug>TComment_2 :call tcomment#SetOption("count", 2)
inoremap <Plug>TComment_1 :call tcomment#SetOption("count", 1)
inoremap <Plug>TComment_s :TCommentAs =&ft_
inoremap <Plug>TComment_n :TCommentAs =&ft 
inoremap <Plug>TComment_a :TCommentAs 
inoremap <Plug>TComment_b :TCommentBlock mode=#
inoremap <Plug>TComment_i v:TCommentInline mode=#
inoremap <Plug>TComment_r :TCommentRight
inoremap <Plug>TComment_  :TComment 
inoremap <Plug>TComment_p :norm! m`vip:TComment``
inoremap <Plug>TComment_ :TComment
map! <S-Insert> <MiddleMouse>
vnoremap  "*y 
nnoremap <silent>  :TmuxNavigateLeft
snoremap <silent>  c
nnoremap <silent> <NL> :TmuxNavigateDown
xnoremap <silent> <NL> :call UltiSnips#SaveLastVisualSelection()gvs
snoremap <silent> <NL> :call UltiSnips#ExpandSnippetOrJump()
nnoremap <silent>  :TmuxNavigateUp
nnoremap <silent>  :TmuxNavigateRight
xnoremap <silent>  :call multiple_cursors#new("v", 0)
nnoremap <silent>  :call multiple_cursors#new("n", 1)
nmap  <Plug>(RepeatRedo)
snoremap  "_c
nnoremap  :w
map Ъ }
map я z
map ч x
map ц w
map м v
map е t
map ы s
map к r
map й q
map з p
map щ o
map т n
map д l
map л k
map о j
map ш i
map р h
map пА gF
map па gf
map пЪ g}
map пъ g]
map п g
map А F
map а f
map в d
map с c
map и b
map ъ ]
map Ц W
map Е T
map Ы S
map К R
map З P
map Д L
map Л K
map О J
map Р H
map Ю >
map Б <
nnoremap <silent>  :TmuxNavigatePrevious
vmap 9 <Plug>TComment_9
nmap 9 <Plug>TComment_9
omap 9 <Plug>TComment_9
vmap 8 <Plug>TComment_8
nmap 8 <Plug>TComment_8
omap 8 <Plug>TComment_8
vmap 7 <Plug>TComment_7
nmap 7 <Plug>TComment_7
omap 7 <Plug>TComment_7
vmap 6 <Plug>TComment_6
nmap 6 <Plug>TComment_6
omap 6 <Plug>TComment_6
vmap 5 <Plug>TComment_5
nmap 5 <Plug>TComment_5
omap 5 <Plug>TComment_5
vmap 4 <Plug>TComment_4
nmap 4 <Plug>TComment_4
omap 4 <Plug>TComment_4
vmap 3 <Plug>TComment_3
nmap 3 <Plug>TComment_3
omap 3 <Plug>TComment_3
vmap 2 <Plug>TComment_2
nmap 2 <Plug>TComment_2
omap 2 <Plug>TComment_2
vmap 1 <Plug>TComment_1
nmap 1 <Plug>TComment_1
omap 1 <Plug>TComment_1
map ca <Plug>TComment_ca
map cc <Plug>TComment_cc
map s <Plug>TComment_s
map n <Plug>TComment_n
map a <Plug>TComment_a
map b <Plug>TComment_b
map i <Plug>TComment_i
map r <Plug>TComment_r
map   <Plug>TComment_ 
map p <Plug>TComment_p
vmap  <Plug>TComment_
nmap  <Plug>TComment_
omap  <Plug>TComment_
map    \\
map   \
nmap <silent> # <Plug>(LoupeOctothorpe)
nmap <silent> * <Plug>(LoupeStar)
nmap . <Plug>(RepeatDot)
xnoremap @ :call ExecuteMacroOverVisualRange()
nmap <silent> N <Plug>(LoupeN)
xmap S <Plug>VSurround
nmap U <Plug>(RepeatUndoLine)
nmap [c <Plug>GitGutterPrevHunk
nmap [xx <Plug>unimpaired_line_xml_encode
xmap [x <Plug>unimpaired_xml_encode
nmap [x <Plug>unimpaired_xml_encode
nmap [uu <Plug>unimpaired_line_url_encode
xmap [u <Plug>unimpaired_url_encode
nmap [u <Plug>unimpaired_url_encode
nmap [yy <Plug>unimpaired_line_string_encode
xmap [y <Plug>unimpaired_string_encode
nmap [y <Plug>unimpaired_string_encode
nmap [p <Plug>unimpairedPutAbove
nnoremap [ov :set virtualedit+=all
nnoremap [ox :set cursorline cursorcolumn
nnoremap [od :diffthis
nnoremap [ob :set background=light
xmap [e <Plug>unimpairedMoveSelectionUp
nmap [e <Plug>unimpairedMoveUp
nmap [  <Plug>unimpairedBlankUp
omap [n <Plug>unimpairedContextPrevious
nmap [n <Plug>unimpairedContextPrevious
nmap [o <Plug>unimpairedOPrevious
nmap [f <Plug>unimpairedDirectoryPrevious
nmap <silent> [T <Plug>unimpairedTFirst
nmap <silent> [t <Plug>unimpairedTPrevious
nmap <silent> [ <Plug>unimpairedQPFile
nmap <silent> [Q <Plug>unimpairedQFirst
nmap <silent> [q <Plug>unimpairedQPrevious
nmap <silent> [ <Plug>unimpairedLPFile
nmap <silent> [L <Plug>unimpairedLFirst
nmap <silent> [l <Plug>unimpairedLPrevious
nmap <silent> [B <Plug>unimpairedBFirst
nmap <silent> [b <Plug>unimpairedBPrevious
nmap <silent> [A <Plug>unimpairedAFirst
nmap <silent> [a <Plug>unimpairedAPrevious
xmap [% [%m'gv``
nnoremap \d :YcmShowDetailedDiagnostic
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
xmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
nmap \hp <Plug>GitGutterPreviewHunk
nmap \hr <Plug>GitGutterUndoHunk:echomsg '\hr is deprecated. Use \hu'
nmap \hu <Plug>GitGutterUndoHunk
nmap \hs <Plug>GitGutterStageHunk
nmap \fw <Plug>(esearch-word-under-cursor)
xmap \fw <Plug>(esearch-word-under-cursor)
omap \fw <Plug>(esearch-word-under-cursor)
nmap \sw <Plug>(esearch-word-under-cursor)
xmap \sw <Plug>(esearch-word-under-cursor)
omap \sw <Plug>(esearch-word-under-cursor)
nmap \ff <Plug>(esearch)
xmap \ff <Plug>(esearch)
omap \ff <Plug>(esearch)
nmap \ss <Plug>(esearch)
xmap \ss <Plug>(esearch)
omap \ss <Plug>(esearch)
nmap \ihn :IHN
nmap \is :IHS:A
nmap \ih :IHS
nnoremap \gb :GitBlame
nnoremap \gp :GitPullRebase
nnoremap \gc :GitCommit
nnoremap \gA :GitAdd <cfile>
nnoremap \ga :GitAdd
nnoremap \gl :GitLog
nnoremap \gs :GitStatus
nnoremap \gD :GitDiff --cached
nnoremap \gd :GitDiff
nmap \\ <Plug>(easymotion-prefix)
xmap \\ <Plug>(easymotion-prefix)
omap \\ <Plug>(easymotion-prefix)
nmap \_s <Plug>TComment_\_s
xmap \_s <Plug>TComment_\_s
omap \_s <Plug>TComment_\_s
nmap \_n <Plug>TComment_\_n
xmap \_n <Plug>TComment_\_n
omap \_n <Plug>TComment_\_n
nmap \_a <Plug>TComment_\_a
xmap \_a <Plug>TComment_\_a
omap \_a <Plug>TComment_\_a
nmap \_b <Plug>TComment_\_b
xmap \_b <Plug>TComment_\_b
omap \_b <Plug>TComment_\_b
nmap \_r <Plug>TComment_\_r
xmap \_r <Plug>TComment_\_r
omap \_r <Plug>TComment_\_r
xmap \_i <Plug>TComment_\_i
nmap \_  <Plug>TComment_\_ 
xmap \_  <Plug>TComment_\_ 
omap \_  <Plug>TComment_\_ 
nmap \_p <Plug>TComment_\_p
xmap \_p <Plug>TComment_\_p
omap \_p <Plug>TComment_\_p
xmap \__ <Plug>TComment_\__
nmap \__ <Plug>TComment_\__
omap \__ <Plug>TComment_\__
nnoremap \b :Unite -no-split -buffer-name=buffer -quick-match buffer
nnoremap \y :Unite -no-split -buffer-name=yank history/yank
nnoremap \f :Unite -no-split -buffer-name=files -start-insert file_rec/async
nmap \A :tab split:Ack 
nmap \a :tab split:Ack ""<Left>
nmap \t <Plug>NERDTreeTabsToggle
onoremap <silent> \cl :wincmd l:close
nnoremap <silent> \ck :wincmd k:close
xnoremap <silent> \ck :wincmd k:close
onoremap <silent> \ck :wincmd k:close
nnoremap <silent> \cj :wincmd j:close
xnoremap <silent> \cj :wincmd j:close
onoremap <silent> \cj :wincmd j:close
nnoremap <silent> \ch :wincmd h:close
xnoremap <silent> \ch :wincmd h:close
onoremap <silent> \ch :wincmd h:close
nmap \tm :tabmove
nmap \tl :tablast
nmap \tf :tabfirst
nmap \tp :tabprevious
nmap \tn :tabnext
nmap \to :tabonly
nmap \te :tabedit
nmap \tr :tabnew
nmap \x :tabclose     " And to return back
nmap \z :tab split    " Handy for zoom in to splitted window
nnoremap \r :RainbowToggle
nmap \v <Plug>(LoupeClearHighlight)
nnoremap \h Sj
nnoremap \w vl
nnoremap \W :FixWhitespace
nmap ]c <Plug>GitGutterNextHunk
nmap ]xx <Plug>unimpaired_line_xml_decode
xmap ]x <Plug>unimpaired_xml_decode
nmap ]x <Plug>unimpaired_xml_decode
nmap ]uu <Plug>unimpaired_line_url_decode
xmap ]u <Plug>unimpaired_url_decode
nmap ]u <Plug>unimpaired_url_decode
nmap ]yy <Plug>unimpaired_line_string_decode
xmap ]y <Plug>unimpaired_string_decode
nmap ]y <Plug>unimpaired_string_decode
nmap ]p <Plug>unimpairedPutBelow
nnoremap ]ov :set virtualedit-=all
nnoremap ]ox :set nocursorline nocursorcolumn
nnoremap ]od :diffoff
nnoremap ]ob :set background=dark
xmap ]e <Plug>unimpairedMoveSelectionDown
nmap ]e <Plug>unimpairedMoveDown
nmap ]  <Plug>unimpairedBlankDown
omap ]n <Plug>unimpairedContextNext
nmap ]n <Plug>unimpairedContextNext
nmap ]o <Plug>unimpairedONext
nmap ]f <Plug>unimpairedDirectoryNext
nmap <silent> ]T <Plug>unimpairedTLast
nmap <silent> ]t <Plug>unimpairedTNext
nmap <silent> ] <Plug>unimpairedQNFile
nmap <silent> ]Q <Plug>unimpairedQLast
nmap <silent> ]q <Plug>unimpairedQNext
nmap <silent> ] <Plug>unimpairedLNFile
nmap <silent> ]L <Plug>unimpairedLLast
nmap <silent> ]l <Plug>unimpairedLNext
nmap <silent> ]B <Plug>unimpairedBLast
nmap <silent> ]b <Plug>unimpairedBNext
nmap <silent> ]A <Plug>unimpairedALast
nmap <silent> ]a <Plug>unimpairedANext
xmap ]% ]%m'gv``
xmap ac <Plug>GitGutterTextObjectOuterVisual
omap ac <Plug>GitGutterTextObjectOuterPending
xmap a% [%v]%
nnoremap cov :set =(&virtualedit =~# "all") ? 'virtualedit-=all' : 'virtualedit+=all'
nnoremap cox :set =&cursorline && &cursorcolumn ? 'nocursorline nocursorcolumn' : 'cursorline cursorcolumn'
nnoremap cod :=&diff ? 'diffoff' : 'diffthis'
nnoremap cob :set background==&background == 'dark' ? 'light' : 'dark'
nmap cr <Plug>Coerce
nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
xmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
nmap <silent> g* <Plug>(LoupeGStar)
nmap <silent> g# <Plug>(LoupeGOctothorpe)
xmap gS <Plug>VgSurround
xmap g> <Plug>TComment_Comment
nmap <silent> g>b <Plug>TComment_Commentb
nmap <silent> g>c <Plug>TComment_Commentc
nmap <silent> g> <Plug>TComment_Comment
xmap g< <Plug>TComment_Uncomment
nmap <silent> g<b <Plug>TComment_Uncommentb
nmap <silent> g<c <Plug>TComment_Uncommentc
nmap <silent> g< <Plug>TComment_Uncomment
xmap gc <Plug>TComment_gc
nmap <silent> gcb <Plug>TComment_gcb
nmap <silent> gcc <Plug>TComment_gcc
nmap <silent> gc9c <Plug>TComment_gc9c
nmap <silent> gc9 <Plug>TComment_gc9
nmap <silent> gc8c <Plug>TComment_gc8c
nmap <silent> gc8 <Plug>TComment_gc8
nmap <silent> gc7c <Plug>TComment_gc7c
nmap <silent> gc7 <Plug>TComment_gc7
nmap <silent> gc6c <Plug>TComment_gc6c
nmap <silent> gc6 <Plug>TComment_gc6
nmap <silent> gc5c <Plug>TComment_gc5c
nmap <silent> gc5 <Plug>TComment_gc5
nmap <silent> gc4c <Plug>TComment_gc4c
nmap <silent> gc4 <Plug>TComment_gc4
nmap <silent> gc3c <Plug>TComment_gc3c
nmap <silent> gc3 <Plug>TComment_gc3
nmap <silent> gc2c <Plug>TComment_gc2c
nmap <silent> gc2 <Plug>TComment_gc2
nmap <silent> gc1c <Plug>TComment_gc1c
nmap <silent> gc1 <Plug>TComment_gc1
nmap <silent> gc <Plug>TComment_gc
omap ic <Plug>TComment_ic
xmap ic <Plug>TComment_ic
nmap <silent> n <Plug>(Loupen)
nmap u <Plug>(RepeatUndo)
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <silent> <Plug>(multiple-cursors-new-word) :call multiple_cursors#new('v', 1)
nnoremap <silent> <Plug>(multiple-cursors-new) :call multiple_cursors#new('v', 0)
nnoremap <silent> <Plug>(multiple-cursors-skip) :call multiple_cursors#skip()
nnoremap <silent> <Plug>(multiple-cursors-prev) :call multiple_cursors#prev()
noremap <silent> <Plug>AirlineSelectNextTab :exe repeat(':tabn|', v:count1)
noremap <silent> <Plug>AirlineSelectPrevTab gT
noremap <silent> <Plug>AirlineSelectTab9 :9tabn
noremap <silent> <Plug>AirlineSelectTab8 :8tabn
noremap <silent> <Plug>AirlineSelectTab7 :7tabn
noremap <silent> <Plug>AirlineSelectTab6 :6tabn
noremap <silent> <Plug>AirlineSelectTab5 :5tabn
noremap <silent> <Plug>AirlineSelectTab4 :4tabn
noremap <silent> <Plug>AirlineSelectTab3 :3tabn
noremap <silent> <Plug>AirlineSelectTab2 :2tabn
noremap <silent> <Plug>AirlineSelectTab1 :1tabn
nnoremap <silent> <Plug>(RepeatRedo) :call repeat#wrap("\<C-R>",v:count)
nnoremap <silent> <Plug>(RepeatUndoLine) :call repeat#wrap('U',v:count)
nnoremap <silent> <Plug>(RepeatUndo) :call repeat#wrap('u',v:count)
nnoremap <silent> <Plug>(RepeatDot) :exe repeat#run(v:count)
nnoremap <C-CR> m`A;``
vmap <F5> <Plug>ToggleBackground
nmap <F5> <Plug>ToggleBackground
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
nnoremap <silent> <Plug>(Loupen) nzvzz:call loupe#hlmatch()
nnoremap <silent> <Plug>(LoupeGStar) g*zvzz:call loupe#hlmatch()
nnoremap <silent> <Plug>(LoupeGOctothorpe) g#zvzz:call loupe#hlmatch()
nnoremap <silent> <Plug>(LoupeN) Nzvzz:call loupe#hlmatch()
nnoremap <silent> <Plug>(LoupeStar) *zvzz:call loupe#hlmatch()
nnoremap <silent> <Plug>(LoupeOctothorpe) #zvzz:call loupe#hlmatch()
nnoremap <silent> <Plug>(LoupeClearHighlight) :nohlsearch| call loupe#private#clear_highlight()
vnoremap <silent> <F21> :silent doautocmd <nomodeline> FocusGained %gv
vnoremap <silent> <F20> :silent doautocmd <nomodeline> FocusLost %gv
onoremap <silent> <F21> :silent doautocmd <nomodeline> FocusGained %
onoremap <silent> <F20> :silent doautocmd <nomodeline> FocusLost %
nnoremap <silent> <F21> :silent doautocmd <nomodeline> FocusGained %
nnoremap <silent> <F20> :silent doautocmd <nomodeline> FocusLost %
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk
nnoremap <silent> <Plug>GitGutterUndoHunk :GitGutterUndoHunk
nnoremap <silent> <Plug>GitGutterStageHunk :GitGutterStageHunk
nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\execute v:count1 . 'GitGutterPrevHunk'\"
nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\execute v:count1 . 'GitGutterNextHunk'\"
xnoremap <silent> <Plug>GitGutterTextObjectOuterVisual :call gitgutter#hunk#text_object(0)
xnoremap <silent> <Plug>GitGutterTextObjectInnerVisual :call gitgutter#hunk#text_object(1)
onoremap <silent> <Plug>GitGutterTextObjectOuterPending :call gitgutter#hunk#text_object(0)
onoremap <silent> <Plug>GitGutterTextObjectInnerPending :call gitgutter#hunk#text_object(1)
noremap <silent> <Plug>(esearch-word-under-cursor) :call esearch#init({'use': 'word_under_cursor'})
xnoremap <silent> <Plug>(esearch) :call esearch#init({'visualmode': 1})
nnoremap <silent> <Plug>(esearch) :call esearch#init()
snoremap <silent> <Plug>(esearch) :call esearch#init()
onoremap <silent> <Plug>(esearch) :call esearch#init()
nnoremap <Plug>CtrlSFQuickfixPrompt :CtrlSFQuickfix 
nnoremap <Plug>CtrlSFPrompt :CtrlSF 
nmap <silent> <Plug>unimpairedOPrevious <Plug>unimpairedDirectoryPrevious:echohl WarningMSG|echo "[o is deprecated. Use [f"|echohl NONE
nmap <silent> <Plug>unimpairedONext <Plug>unimpairedDirectoryNext:echohl WarningMSG|echo "]o is deprecated. Use ]f"|echohl NONE
nnoremap <silent> <Plug>unimpairedTLast :exe "".(v:count ? v:count : "")."tlast"
nnoremap <silent> <Plug>unimpairedTFirst :exe "".(v:count ? v:count : "")."tfirst"
nnoremap <silent> <Plug>unimpairedTNext :exe "".(v:count ? v:count : "")."tnext"
nnoremap <silent> <Plug>unimpairedTPrevious :exe "".(v:count ? v:count : "")."tprevious"
nnoremap <silent> <Plug>unimpairedQNFile :exe "".(v:count ? v:count : "")."cnfile"zv
nnoremap <silent> <Plug>unimpairedQPFile :exe "".(v:count ? v:count : "")."cpfile"zv
nnoremap <silent> <Plug>unimpairedQLast :exe "".(v:count ? v:count : "")."clast"zv
nnoremap <silent> <Plug>unimpairedQFirst :exe "".(v:count ? v:count : "")."cfirst"zv
nnoremap <silent> <Plug>unimpairedQNext :exe "".(v:count ? v:count : "")."cnext"zv
nnoremap <silent> <Plug>unimpairedQPrevious :exe "".(v:count ? v:count : "")."cprevious"zv
nnoremap <silent> <Plug>unimpairedLNFile :exe "".(v:count ? v:count : "")."lnfile"zv
nnoremap <silent> <Plug>unimpairedLPFile :exe "".(v:count ? v:count : "")."lpfile"zv
nnoremap <silent> <Plug>unimpairedLLast :exe "".(v:count ? v:count : "")."llast"zv
nnoremap <silent> <Plug>unimpairedLFirst :exe "".(v:count ? v:count : "")."lfirst"zv
nnoremap <silent> <Plug>unimpairedLNext :exe "".(v:count ? v:count : "")."lnext"zv
nnoremap <silent> <Plug>unimpairedLPrevious :exe "".(v:count ? v:count : "")."lprevious"zv
nnoremap <silent> <Plug>unimpairedBLast :exe "".(v:count ? v:count : "")."blast"
nnoremap <silent> <Plug>unimpairedBFirst :exe "".(v:count ? v:count : "")."bfirst"
nnoremap <silent> <Plug>unimpairedBNext :exe "".(v:count ? v:count : "")."bnext"
nnoremap <silent> <Plug>unimpairedBPrevious :exe "".(v:count ? v:count : "")."bprevious"
nnoremap <silent> <Plug>unimpairedALast :exe "".(v:count ? v:count : "")."last"
nnoremap <silent> <Plug>unimpairedAFirst :exe "".(v:count ? v:count : "")."first"
nnoremap <silent> <Plug>unimpairedANext :exe "".(v:count ? v:count : "")."next"
nnoremap <silent> <Plug>unimpairedAPrevious :exe "".(v:count ? v:count : "")."previous"
snoremap <silent> <Del> c
snoremap <silent> <BS> c
snoremap <silent> <C-Tab> :call UltiSnips#ListSnippets()
map <silent> <Plug>(easymotion-prefix)N <Plug>(easymotion-N)
map <silent> <Plug>(easymotion-prefix)n <Plug>(easymotion-n)
map <silent> <Plug>(easymotion-prefix)k <Plug>(easymotion-k)
map <silent> <Plug>(easymotion-prefix)j <Plug>(easymotion-j)
map <silent> <Plug>(easymotion-prefix)gE <Plug>(easymotion-gE)
map <silent> <Plug>(easymotion-prefix)ge <Plug>(easymotion-ge)
map <silent> <Plug>(easymotion-prefix)E <Plug>(easymotion-E)
map <silent> <Plug>(easymotion-prefix)e <Plug>(easymotion-e)
map <silent> <Plug>(easymotion-prefix)B <Plug>(easymotion-B)
map <silent> <Plug>(easymotion-prefix)b <Plug>(easymotion-b)
map <silent> <Plug>(easymotion-prefix)W <Plug>(easymotion-W)
map <silent> <Plug>(easymotion-prefix)w <Plug>(easymotion-w)
map <silent> <Plug>(easymotion-prefix)T <Plug>(easymotion-T)
map <silent> <Plug>(easymotion-prefix)t <Plug>(easymotion-t)
map <silent> <Plug>(easymotion-prefix)s <Plug>(easymotion-s)
map <silent> <Plug>(easymotion-prefix)F <Plug>(easymotion-F)
map <silent> <Plug>(easymotion-prefix)f <Plug>(easymotion-f)
xnoremap <silent> <Plug>(easymotion-activate) :call EasyMotion#activate(1)
nnoremap <silent> <Plug>(easymotion-activate) :call EasyMotion#activate(0)
snoremap <silent> <Plug>(easymotion-activate) :call EasyMotion#activate(0)
onoremap <silent> <Plug>(easymotion-activate) :call EasyMotion#activate(0)
noremap <silent> <Plug>(easymotion-dotrepeat) :call EasyMotion#DotRepeat()
xnoremap <silent> <Plug>(easymotion-repeat) :call EasyMotion#Repeat(1)
nnoremap <silent> <Plug>(easymotion-repeat) :call EasyMotion#Repeat(0)
snoremap <silent> <Plug>(easymotion-repeat) :call EasyMotion#Repeat(0)
onoremap <silent> <Plug>(easymotion-repeat) :call EasyMotion#Repeat(0)
xnoremap <silent> <Plug>(easymotion-prev) :call EasyMotion#NextPrevious(1,1)
nnoremap <silent> <Plug>(easymotion-prev) :call EasyMotion#NextPrevious(0,1)
snoremap <silent> <Plug>(easymotion-prev) :call EasyMotion#NextPrevious(0,1)
onoremap <silent> <Plug>(easymotion-prev) :call EasyMotion#NextPrevious(0,1)
xnoremap <silent> <Plug>(easymotion-next) :call EasyMotion#NextPrevious(1,0)
nnoremap <silent> <Plug>(easymotion-next) :call EasyMotion#NextPrevious(0,0)
snoremap <silent> <Plug>(easymotion-next) :call EasyMotion#NextPrevious(0,0)
onoremap <silent> <Plug>(easymotion-next) :call EasyMotion#NextPrevious(0,0)
xnoremap <silent> <Plug>(easymotion-wl) :call EasyMotion#WBL(1,0)
nnoremap <silent> <Plug>(easymotion-wl) :call EasyMotion#WBL(0,0)
snoremap <silent> <Plug>(easymotion-wl) :call EasyMotion#WBL(0,0)
onoremap <silent> <Plug>(easymotion-wl) :call EasyMotion#WBL(0,0)
xnoremap <silent> <Plug>(easymotion-lineforward) :call EasyMotion#LineAnywhere(1,0)
nnoremap <silent> <Plug>(easymotion-lineforward) :call EasyMotion#LineAnywhere(0,0)
snoremap <silent> <Plug>(easymotion-lineforward) :call EasyMotion#LineAnywhere(0,0)
onoremap <silent> <Plug>(easymotion-lineforward) :call EasyMotion#LineAnywhere(0,0)
xnoremap <silent> <Plug>(easymotion-lineanywhere) :call EasyMotion#LineAnywhere(1,2)
nnoremap <silent> <Plug>(easymotion-lineanywhere) :call EasyMotion#LineAnywhere(0,2)
snoremap <silent> <Plug>(easymotion-lineanywhere) :call EasyMotion#LineAnywhere(0,2)
onoremap <silent> <Plug>(easymotion-lineanywhere) :call EasyMotion#LineAnywhere(0,2)
xnoremap <silent> <Plug>(easymotion-bd-wl) :call EasyMotion#WBL(1,2)
nnoremap <silent> <Plug>(easymotion-bd-wl) :call EasyMotion#WBL(0,2)
snoremap <silent> <Plug>(easymotion-bd-wl) :call EasyMotion#WBL(0,2)
onoremap <silent> <Plug>(easymotion-bd-wl) :call EasyMotion#WBL(0,2)
xnoremap <silent> <Plug>(easymotion-linebackward) :call EasyMotion#LineAnywhere(1,1)
nnoremap <silent> <Plug>(easymotion-linebackward) :call EasyMotion#LineAnywhere(0,1)
snoremap <silent> <Plug>(easymotion-linebackward) :call EasyMotion#LineAnywhere(0,1)
onoremap <silent> <Plug>(easymotion-linebackward) :call EasyMotion#LineAnywhere(0,1)
xnoremap <silent> <Plug>(easymotion-bl) :call EasyMotion#WBL(1,1)
nnoremap <silent> <Plug>(easymotion-bl) :call EasyMotion#WBL(0,1)
snoremap <silent> <Plug>(easymotion-bl) :call EasyMotion#WBL(0,1)
onoremap <silent> <Plug>(easymotion-bl) :call EasyMotion#WBL(0,1)
xnoremap <silent> <Plug>(easymotion-el) :call EasyMotion#EL(1,0)
nnoremap <silent> <Plug>(easymotion-el) :call EasyMotion#EL(0,0)
snoremap <silent> <Plug>(easymotion-el) :call EasyMotion#EL(0,0)
onoremap <silent> <Plug>(easymotion-el) :call EasyMotion#EL(0,0)
xnoremap <silent> <Plug>(easymotion-gel) :call EasyMotion#EL(1,1)
nnoremap <silent> <Plug>(easymotion-gel) :call EasyMotion#EL(0,1)
snoremap <silent> <Plug>(easymotion-gel) :call EasyMotion#EL(0,1)
onoremap <silent> <Plug>(easymotion-gel) :call EasyMotion#EL(0,1)
xnoremap <silent> <Plug>(easymotion-bd-el) :call EasyMotion#EL(1,2)
nnoremap <silent> <Plug>(easymotion-bd-el) :call EasyMotion#EL(0,2)
snoremap <silent> <Plug>(easymotion-bd-el) :call EasyMotion#EL(0,2)
onoremap <silent> <Plug>(easymotion-bd-el) :call EasyMotion#EL(0,2)
xnoremap <silent> <Plug>(easymotion-jumptoanywhere) :call EasyMotion#JumpToAnywhere(1,2)
nnoremap <silent> <Plug>(easymotion-jumptoanywhere) :call EasyMotion#JumpToAnywhere(0,2)
snoremap <silent> <Plug>(easymotion-jumptoanywhere) :call EasyMotion#JumpToAnywhere(0,2)
onoremap <silent> <Plug>(easymotion-jumptoanywhere) :call EasyMotion#JumpToAnywhere(0,2)
xnoremap <silent> <Plug>(easymotion-vim-n) :call EasyMotion#Search(1,0,1)
nnoremap <silent> <Plug>(easymotion-vim-n) :call EasyMotion#Search(0,0,1)
snoremap <silent> <Plug>(easymotion-vim-n) :call EasyMotion#Search(0,0,1)
onoremap <silent> <Plug>(easymotion-vim-n) :call EasyMotion#Search(0,0,1)
xnoremap <silent> <Plug>(easymotion-n) :call EasyMotion#Search(1,0,0)
nnoremap <silent> <Plug>(easymotion-n) :call EasyMotion#Search(0,0,0)
snoremap <silent> <Plug>(easymotion-n) :call EasyMotion#Search(0,0,0)
onoremap <silent> <Plug>(easymotion-n) :call EasyMotion#Search(0,0,0)
xnoremap <silent> <Plug>(easymotion-bd-n) :call EasyMotion#Search(1,2,0)
nnoremap <silent> <Plug>(easymotion-bd-n) :call EasyMotion#Search(0,2,0)
snoremap <silent> <Plug>(easymotion-bd-n) :call EasyMotion#Search(0,2,0)
onoremap <silent> <Plug>(easymotion-bd-n) :call EasyMotion#Search(0,2,0)
xnoremap <silent> <Plug>(easymotion-vim-N) :call EasyMotion#Search(1,1,1)
nnoremap <silent> <Plug>(easymotion-vim-N) :call EasyMotion#Search(0,1,1)
snoremap <silent> <Plug>(easymotion-vim-N) :call EasyMotion#Search(0,1,1)
onoremap <silent> <Plug>(easymotion-vim-N) :call EasyMotion#Search(0,1,1)
xnoremap <silent> <Plug>(easymotion-N) :call EasyMotion#Search(1,1,0)
nnoremap <silent> <Plug>(easymotion-N) :call EasyMotion#Search(0,1,0)
snoremap <silent> <Plug>(easymotion-N) :call EasyMotion#Search(0,1,0)
onoremap <silent> <Plug>(easymotion-N) :call EasyMotion#Search(0,1,0)
xnoremap <silent> <Plug>(easymotion-eol-j) :call EasyMotion#Eol(1,0)
nnoremap <silent> <Plug>(easymotion-eol-j) :call EasyMotion#Eol(0,0)
snoremap <silent> <Plug>(easymotion-eol-j) :call EasyMotion#Eol(0,0)
onoremap <silent> <Plug>(easymotion-eol-j) :call EasyMotion#Eol(0,0)
xnoremap <silent> <Plug>(easymotion-sol-k) :call EasyMotion#Sol(1,1)
nnoremap <silent> <Plug>(easymotion-sol-k) :call EasyMotion#Sol(0,1)
snoremap <silent> <Plug>(easymotion-sol-k) :call EasyMotion#Sol(0,1)
onoremap <silent> <Plug>(easymotion-sol-k) :call EasyMotion#Sol(0,1)
xnoremap <silent> <Plug>(easymotion-sol-j) :call EasyMotion#Sol(1,0)
nnoremap <silent> <Plug>(easymotion-sol-j) :call EasyMotion#Sol(0,0)
snoremap <silent> <Plug>(easymotion-sol-j) :call EasyMotion#Sol(0,0)
onoremap <silent> <Plug>(easymotion-sol-j) :call EasyMotion#Sol(0,0)
xnoremap <silent> <Plug>(easymotion-k) :call EasyMotion#JK(1,1)
nnoremap <silent> <Plug>(easymotion-k) :call EasyMotion#JK(0,1)
snoremap <silent> <Plug>(easymotion-k) :call EasyMotion#JK(0,1)
onoremap <silent> <Plug>(easymotion-k) :call EasyMotion#JK(0,1)
xnoremap <silent> <Plug>(easymotion-j) :call EasyMotion#JK(1,0)
nnoremap <silent> <Plug>(easymotion-j) :call EasyMotion#JK(0,0)
snoremap <silent> <Plug>(easymotion-j) :call EasyMotion#JK(0,0)
onoremap <silent> <Plug>(easymotion-j) :call EasyMotion#JK(0,0)
xnoremap <silent> <Plug>(easymotion-bd-jk) :call EasyMotion#JK(1,2)
nnoremap <silent> <Plug>(easymotion-bd-jk) :call EasyMotion#JK(0,2)
snoremap <silent> <Plug>(easymotion-bd-jk) :call EasyMotion#JK(0,2)
onoremap <silent> <Plug>(easymotion-bd-jk) :call EasyMotion#JK(0,2)
xnoremap <silent> <Plug>(easymotion-eol-bd-jk) :call EasyMotion#Eol(1,2)
nnoremap <silent> <Plug>(easymotion-eol-bd-jk) :call EasyMotion#Eol(0,2)
snoremap <silent> <Plug>(easymotion-eol-bd-jk) :call EasyMotion#Eol(0,2)
onoremap <silent> <Plug>(easymotion-eol-bd-jk) :call EasyMotion#Eol(0,2)
xnoremap <silent> <Plug>(easymotion-sol-bd-jk) :call EasyMotion#Sol(1,2)
nnoremap <silent> <Plug>(easymotion-sol-bd-jk) :call EasyMotion#Sol(0,2)
snoremap <silent> <Plug>(easymotion-sol-bd-jk) :call EasyMotion#Sol(0,2)
onoremap <silent> <Plug>(easymotion-sol-bd-jk) :call EasyMotion#Sol(0,2)
xnoremap <silent> <Plug>(easymotion-eol-k) :call EasyMotion#Eol(1,1)
nnoremap <silent> <Plug>(easymotion-eol-k) :call EasyMotion#Eol(0,1)
snoremap <silent> <Plug>(easymotion-eol-k) :call EasyMotion#Eol(0,1)
onoremap <silent> <Plug>(easymotion-eol-k) :call EasyMotion#Eol(0,1)
xnoremap <silent> <Plug>(easymotion-iskeyword-ge) :call EasyMotion#EK(1,1)
nnoremap <silent> <Plug>(easymotion-iskeyword-ge) :call EasyMotion#EK(0,1)
snoremap <silent> <Plug>(easymotion-iskeyword-ge) :call EasyMotion#EK(0,1)
onoremap <silent> <Plug>(easymotion-iskeyword-ge) :call EasyMotion#EK(0,1)
xnoremap <silent> <Plug>(easymotion-w) :call EasyMotion#WB(1,0)
nnoremap <silent> <Plug>(easymotion-w) :call EasyMotion#WB(0,0)
snoremap <silent> <Plug>(easymotion-w) :call EasyMotion#WB(0,0)
onoremap <silent> <Plug>(easymotion-w) :call EasyMotion#WB(0,0)
xnoremap <silent> <Plug>(easymotion-bd-W) :call EasyMotion#WBW(1,2)
nnoremap <silent> <Plug>(easymotion-bd-W) :call EasyMotion#WBW(0,2)
snoremap <silent> <Plug>(easymotion-bd-W) :call EasyMotion#WBW(0,2)
onoremap <silent> <Plug>(easymotion-bd-W) :call EasyMotion#WBW(0,2)
xnoremap <silent> <Plug>(easymotion-iskeyword-w) :call EasyMotion#WBK(1,0)
nnoremap <silent> <Plug>(easymotion-iskeyword-w) :call EasyMotion#WBK(0,0)
snoremap <silent> <Plug>(easymotion-iskeyword-w) :call EasyMotion#WBK(0,0)
onoremap <silent> <Plug>(easymotion-iskeyword-w) :call EasyMotion#WBK(0,0)
xnoremap <silent> <Plug>(easymotion-gE) :call EasyMotion#EW(1,1)
nnoremap <silent> <Plug>(easymotion-gE) :call EasyMotion#EW(0,1)
snoremap <silent> <Plug>(easymotion-gE) :call EasyMotion#EW(0,1)
onoremap <silent> <Plug>(easymotion-gE) :call EasyMotion#EW(0,1)
xnoremap <silent> <Plug>(easymotion-e) :call EasyMotion#E(1,0)
nnoremap <silent> <Plug>(easymotion-e) :call EasyMotion#E(0,0)
snoremap <silent> <Plug>(easymotion-e) :call EasyMotion#E(0,0)
onoremap <silent> <Plug>(easymotion-e) :call EasyMotion#E(0,0)
xnoremap <silent> <Plug>(easymotion-bd-E) :call EasyMotion#EW(1,2)
nnoremap <silent> <Plug>(easymotion-bd-E) :call EasyMotion#EW(0,2)
snoremap <silent> <Plug>(easymotion-bd-E) :call EasyMotion#EW(0,2)
onoremap <silent> <Plug>(easymotion-bd-E) :call EasyMotion#EW(0,2)
xnoremap <silent> <Plug>(easymotion-iskeyword-e) :call EasyMotion#EK(1,0)
nnoremap <silent> <Plug>(easymotion-iskeyword-e) :call EasyMotion#EK(0,0)
snoremap <silent> <Plug>(easymotion-iskeyword-e) :call EasyMotion#EK(0,0)
onoremap <silent> <Plug>(easymotion-iskeyword-e) :call EasyMotion#EK(0,0)
xnoremap <silent> <Plug>(easymotion-b) :call EasyMotion#WB(1,1)
nnoremap <silent> <Plug>(easymotion-b) :call EasyMotion#WB(0,1)
snoremap <silent> <Plug>(easymotion-b) :call EasyMotion#WB(0,1)
onoremap <silent> <Plug>(easymotion-b) :call EasyMotion#WB(0,1)
xnoremap <silent> <Plug>(easymotion-iskeyword-b) :call EasyMotion#WBK(1,1)
nnoremap <silent> <Plug>(easymotion-iskeyword-b) :call EasyMotion#WBK(0,1)
snoremap <silent> <Plug>(easymotion-iskeyword-b) :call EasyMotion#WBK(0,1)
onoremap <silent> <Plug>(easymotion-iskeyword-b) :call EasyMotion#WBK(0,1)
xnoremap <silent> <Plug>(easymotion-iskeyword-bd-w) :call EasyMotion#WBK(1,2)
nnoremap <silent> <Plug>(easymotion-iskeyword-bd-w) :call EasyMotion#WBK(0,2)
snoremap <silent> <Plug>(easymotion-iskeyword-bd-w) :call EasyMotion#WBK(0,2)
onoremap <silent> <Plug>(easymotion-iskeyword-bd-w) :call EasyMotion#WBK(0,2)
xnoremap <silent> <Plug>(easymotion-W) :call EasyMotion#WBW(1,0)
nnoremap <silent> <Plug>(easymotion-W) :call EasyMotion#WBW(0,0)
snoremap <silent> <Plug>(easymotion-W) :call EasyMotion#WBW(0,0)
onoremap <silent> <Plug>(easymotion-W) :call EasyMotion#WBW(0,0)
xnoremap <silent> <Plug>(easymotion-bd-w) :call EasyMotion#WB(1,2)
nnoremap <silent> <Plug>(easymotion-bd-w) :call EasyMotion#WB(0,2)
snoremap <silent> <Plug>(easymotion-bd-w) :call EasyMotion#WB(0,2)
onoremap <silent> <Plug>(easymotion-bd-w) :call EasyMotion#WB(0,2)
xnoremap <silent> <Plug>(easymotion-iskeyword-bd-e) :call EasyMotion#EK(1,2)
nnoremap <silent> <Plug>(easymotion-iskeyword-bd-e) :call EasyMotion#EK(0,2)
snoremap <silent> <Plug>(easymotion-iskeyword-bd-e) :call EasyMotion#EK(0,2)
onoremap <silent> <Plug>(easymotion-iskeyword-bd-e) :call EasyMotion#EK(0,2)
xnoremap <silent> <Plug>(easymotion-ge) :call EasyMotion#E(1,1)
nnoremap <silent> <Plug>(easymotion-ge) :call EasyMotion#E(0,1)
snoremap <silent> <Plug>(easymotion-ge) :call EasyMotion#E(0,1)
onoremap <silent> <Plug>(easymotion-ge) :call EasyMotion#E(0,1)
xnoremap <silent> <Plug>(easymotion-E) :call EasyMotion#EW(1,0)
nnoremap <silent> <Plug>(easymotion-E) :call EasyMotion#EW(0,0)
snoremap <silent> <Plug>(easymotion-E) :call EasyMotion#EW(0,0)
onoremap <silent> <Plug>(easymotion-E) :call EasyMotion#EW(0,0)
xnoremap <silent> <Plug>(easymotion-bd-e) :call EasyMotion#E(1,2)
nnoremap <silent> <Plug>(easymotion-bd-e) :call EasyMotion#E(0,2)
snoremap <silent> <Plug>(easymotion-bd-e) :call EasyMotion#E(0,2)
onoremap <silent> <Plug>(easymotion-bd-e) :call EasyMotion#E(0,2)
xnoremap <silent> <Plug>(easymotion-B) :call EasyMotion#WBW(1,1)
nnoremap <silent> <Plug>(easymotion-B) :call EasyMotion#WBW(0,1)
snoremap <silent> <Plug>(easymotion-B) :call EasyMotion#WBW(0,1)
onoremap <silent> <Plug>(easymotion-B) :call EasyMotion#WBW(0,1)
nnoremap <silent> <Plug>(easymotion-overwin-w) :call EasyMotion#overwin#w()
nnoremap <silent> <Plug>(easymotion-overwin-line) :call EasyMotion#overwin#line()
nnoremap <silent> <Plug>(easymotion-overwin-f2) :call EasyMotion#OverwinF(2)
nnoremap <silent> <Plug>(easymotion-overwin-f) :call EasyMotion#OverwinF(1)
xnoremap <silent> <Plug>(easymotion-Tln) :call EasyMotion#TL(-1,1,1)
nnoremap <silent> <Plug>(easymotion-Tln) :call EasyMotion#TL(-1,0,1)
snoremap <silent> <Plug>(easymotion-Tln) :call EasyMotion#TL(-1,0,1)
onoremap <silent> <Plug>(easymotion-Tln) :call EasyMotion#TL(-1,0,1)
xnoremap <silent> <Plug>(easymotion-t2) :call EasyMotion#T(2,1,0)
nnoremap <silent> <Plug>(easymotion-t2) :call EasyMotion#T(2,0,0)
snoremap <silent> <Plug>(easymotion-t2) :call EasyMotion#T(2,0,0)
onoremap <silent> <Plug>(easymotion-t2) :call EasyMotion#T(2,0,0)
xnoremap <silent> <Plug>(easymotion-t) :call EasyMotion#T(1,1,0)
nnoremap <silent> <Plug>(easymotion-t) :call EasyMotion#T(1,0,0)
snoremap <silent> <Plug>(easymotion-t) :call EasyMotion#T(1,0,0)
onoremap <silent> <Plug>(easymotion-t) :call EasyMotion#T(1,0,0)
xnoremap <silent> <Plug>(easymotion-s) :call EasyMotion#S(1,1,2)
nnoremap <silent> <Plug>(easymotion-s) :call EasyMotion#S(1,0,2)
snoremap <silent> <Plug>(easymotion-s) :call EasyMotion#S(1,0,2)
onoremap <silent> <Plug>(easymotion-s) :call EasyMotion#S(1,0,2)
xnoremap <silent> <Plug>(easymotion-tn) :call EasyMotion#T(-1,1,0)
nnoremap <silent> <Plug>(easymotion-tn) :call EasyMotion#T(-1,0,0)
snoremap <silent> <Plug>(easymotion-tn) :call EasyMotion#T(-1,0,0)
onoremap <silent> <Plug>(easymotion-tn) :call EasyMotion#T(-1,0,0)
xnoremap <silent> <Plug>(easymotion-bd-t2) :call EasyMotion#T(2,1,2)
nnoremap <silent> <Plug>(easymotion-bd-t2) :call EasyMotion#T(2,0,2)
snoremap <silent> <Plug>(easymotion-bd-t2) :call EasyMotion#T(2,0,2)
onoremap <silent> <Plug>(easymotion-bd-t2) :call EasyMotion#T(2,0,2)
xnoremap <silent> <Plug>(easymotion-tl) :call EasyMotion#TL(1,1,0)
nnoremap <silent> <Plug>(easymotion-tl) :call EasyMotion#TL(1,0,0)
snoremap <silent> <Plug>(easymotion-tl) :call EasyMotion#TL(1,0,0)
onoremap <silent> <Plug>(easymotion-tl) :call EasyMotion#TL(1,0,0)
xnoremap <silent> <Plug>(easymotion-bd-tn) :call EasyMotion#T(-1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-tn) :call EasyMotion#T(-1,0,2)
snoremap <silent> <Plug>(easymotion-bd-tn) :call EasyMotion#T(-1,0,2)
onoremap <silent> <Plug>(easymotion-bd-tn) :call EasyMotion#T(-1,0,2)
xnoremap <silent> <Plug>(easymotion-fn) :call EasyMotion#S(-1,1,0)
nnoremap <silent> <Plug>(easymotion-fn) :call EasyMotion#S(-1,0,0)
snoremap <silent> <Plug>(easymotion-fn) :call EasyMotion#S(-1,0,0)
onoremap <silent> <Plug>(easymotion-fn) :call EasyMotion#S(-1,0,0)
xnoremap <silent> <Plug>(easymotion-bd-tl) :call EasyMotion#TL(1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-tl) :call EasyMotion#TL(1,0,2)
snoremap <silent> <Plug>(easymotion-bd-tl) :call EasyMotion#TL(1,0,2)
onoremap <silent> <Plug>(easymotion-bd-tl) :call EasyMotion#TL(1,0,2)
xnoremap <silent> <Plug>(easymotion-fl) :call EasyMotion#SL(1,1,0)
nnoremap <silent> <Plug>(easymotion-fl) :call EasyMotion#SL(1,0,0)
snoremap <silent> <Plug>(easymotion-fl) :call EasyMotion#SL(1,0,0)
onoremap <silent> <Plug>(easymotion-fl) :call EasyMotion#SL(1,0,0)
xnoremap <silent> <Plug>(easymotion-bd-tl2) :call EasyMotion#TL(2,1,2)
nnoremap <silent> <Plug>(easymotion-bd-tl2) :call EasyMotion#TL(2,0,2)
snoremap <silent> <Plug>(easymotion-bd-tl2) :call EasyMotion#TL(2,0,2)
onoremap <silent> <Plug>(easymotion-bd-tl2) :call EasyMotion#TL(2,0,2)
xnoremap <silent> <Plug>(easymotion-bd-fn) :call EasyMotion#S(-1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-fn) :call EasyMotion#S(-1,0,2)
snoremap <silent> <Plug>(easymotion-bd-fn) :call EasyMotion#S(-1,0,2)
onoremap <silent> <Plug>(easymotion-bd-fn) :call EasyMotion#S(-1,0,2)
xnoremap <silent> <Plug>(easymotion-f) :call EasyMotion#S(1,1,0)
nnoremap <silent> <Plug>(easymotion-f) :call EasyMotion#S(1,0,0)
snoremap <silent> <Plug>(easymotion-f) :call EasyMotion#S(1,0,0)
onoremap <silent> <Plug>(easymotion-f) :call EasyMotion#S(1,0,0)
xnoremap <silent> <Plug>(easymotion-bd-fl) :call EasyMotion#SL(1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-fl) :call EasyMotion#SL(1,0,2)
snoremap <silent> <Plug>(easymotion-bd-fl) :call EasyMotion#SL(1,0,2)
onoremap <silent> <Plug>(easymotion-bd-fl) :call EasyMotion#SL(1,0,2)
xnoremap <silent> <Plug>(easymotion-Fl2) :call EasyMotion#SL(2,1,1)
nnoremap <silent> <Plug>(easymotion-Fl2) :call EasyMotion#SL(2,0,1)
snoremap <silent> <Plug>(easymotion-Fl2) :call EasyMotion#SL(2,0,1)
onoremap <silent> <Plug>(easymotion-Fl2) :call EasyMotion#SL(2,0,1)
xnoremap <silent> <Plug>(easymotion-tl2) :call EasyMotion#TL(2,1,0)
nnoremap <silent> <Plug>(easymotion-tl2) :call EasyMotion#TL(2,0,0)
snoremap <silent> <Plug>(easymotion-tl2) :call EasyMotion#TL(2,0,0)
onoremap <silent> <Plug>(easymotion-tl2) :call EasyMotion#TL(2,0,0)
xnoremap <silent> <Plug>(easymotion-f2) :call EasyMotion#S(2,1,0)
nnoremap <silent> <Plug>(easymotion-f2) :call EasyMotion#S(2,0,0)
snoremap <silent> <Plug>(easymotion-f2) :call EasyMotion#S(2,0,0)
onoremap <silent> <Plug>(easymotion-f2) :call EasyMotion#S(2,0,0)
xnoremap <silent> <Plug>(easymotion-Fln) :call EasyMotion#SL(-1,1,1)
nnoremap <silent> <Plug>(easymotion-Fln) :call EasyMotion#SL(-1,0,1)
snoremap <silent> <Plug>(easymotion-Fln) :call EasyMotion#SL(-1,0,1)
onoremap <silent> <Plug>(easymotion-Fln) :call EasyMotion#SL(-1,0,1)
xnoremap <silent> <Plug>(easymotion-sln) :call EasyMotion#SL(-1,1,2)
nnoremap <silent> <Plug>(easymotion-sln) :call EasyMotion#SL(-1,0,2)
snoremap <silent> <Plug>(easymotion-sln) :call EasyMotion#SL(-1,0,2)
onoremap <silent> <Plug>(easymotion-sln) :call EasyMotion#SL(-1,0,2)
xnoremap <silent> <Plug>(easymotion-tln) :call EasyMotion#TL(-1,1,0)
nnoremap <silent> <Plug>(easymotion-tln) :call EasyMotion#TL(-1,0,0)
snoremap <silent> <Plug>(easymotion-tln) :call EasyMotion#TL(-1,0,0)
onoremap <silent> <Plug>(easymotion-tln) :call EasyMotion#TL(-1,0,0)
xnoremap <silent> <Plug>(easymotion-fl2) :call EasyMotion#SL(2,1,0)
nnoremap <silent> <Plug>(easymotion-fl2) :call EasyMotion#SL(2,0,0)
snoremap <silent> <Plug>(easymotion-fl2) :call EasyMotion#SL(2,0,0)
onoremap <silent> <Plug>(easymotion-fl2) :call EasyMotion#SL(2,0,0)
xnoremap <silent> <Plug>(easymotion-bd-fl2) :call EasyMotion#SL(2,1,2)
nnoremap <silent> <Plug>(easymotion-bd-fl2) :call EasyMotion#SL(2,0,2)
snoremap <silent> <Plug>(easymotion-bd-fl2) :call EasyMotion#SL(2,0,2)
onoremap <silent> <Plug>(easymotion-bd-fl2) :call EasyMotion#SL(2,0,2)
xnoremap <silent> <Plug>(easymotion-T2) :call EasyMotion#T(2,1,1)
nnoremap <silent> <Plug>(easymotion-T2) :call EasyMotion#T(2,0,1)
snoremap <silent> <Plug>(easymotion-T2) :call EasyMotion#T(2,0,1)
onoremap <silent> <Plug>(easymotion-T2) :call EasyMotion#T(2,0,1)
xnoremap <silent> <Plug>(easymotion-bd-tln) :call EasyMotion#TL(-1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-tln) :call EasyMotion#TL(-1,0,2)
snoremap <silent> <Plug>(easymotion-bd-tln) :call EasyMotion#TL(-1,0,2)
onoremap <silent> <Plug>(easymotion-bd-tln) :call EasyMotion#TL(-1,0,2)
xnoremap <silent> <Plug>(easymotion-T) :call EasyMotion#T(1,1,1)
nnoremap <silent> <Plug>(easymotion-T) :call EasyMotion#T(1,0,1)
snoremap <silent> <Plug>(easymotion-T) :call EasyMotion#T(1,0,1)
onoremap <silent> <Plug>(easymotion-T) :call EasyMotion#T(1,0,1)
xnoremap <silent> <Plug>(easymotion-bd-t) :call EasyMotion#T(1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-t) :call EasyMotion#T(1,0,2)
snoremap <silent> <Plug>(easymotion-bd-t) :call EasyMotion#T(1,0,2)
onoremap <silent> <Plug>(easymotion-bd-t) :call EasyMotion#T(1,0,2)
xnoremap <silent> <Plug>(easymotion-Tn) :call EasyMotion#T(-1,1,1)
nnoremap <silent> <Plug>(easymotion-Tn) :call EasyMotion#T(-1,0,1)
snoremap <silent> <Plug>(easymotion-Tn) :call EasyMotion#T(-1,0,1)
onoremap <silent> <Plug>(easymotion-Tn) :call EasyMotion#T(-1,0,1)
xnoremap <silent> <Plug>(easymotion-s2) :call EasyMotion#S(2,1,2)
nnoremap <silent> <Plug>(easymotion-s2) :call EasyMotion#S(2,0,2)
snoremap <silent> <Plug>(easymotion-s2) :call EasyMotion#S(2,0,2)
onoremap <silent> <Plug>(easymotion-s2) :call EasyMotion#S(2,0,2)
xnoremap <silent> <Plug>(easymotion-Tl) :call EasyMotion#TL(1,1,1)
nnoremap <silent> <Plug>(easymotion-Tl) :call EasyMotion#TL(1,0,1)
snoremap <silent> <Plug>(easymotion-Tl) :call EasyMotion#TL(1,0,1)
onoremap <silent> <Plug>(easymotion-Tl) :call EasyMotion#TL(1,0,1)
xnoremap <silent> <Plug>(easymotion-sn) :call EasyMotion#S(-1,1,2)
nnoremap <silent> <Plug>(easymotion-sn) :call EasyMotion#S(-1,0,2)
snoremap <silent> <Plug>(easymotion-sn) :call EasyMotion#S(-1,0,2)
onoremap <silent> <Plug>(easymotion-sn) :call EasyMotion#S(-1,0,2)
xnoremap <silent> <Plug>(easymotion-Fn) :call EasyMotion#S(-1,1,1)
nnoremap <silent> <Plug>(easymotion-Fn) :call EasyMotion#S(-1,0,1)
snoremap <silent> <Plug>(easymotion-Fn) :call EasyMotion#S(-1,0,1)
onoremap <silent> <Plug>(easymotion-Fn) :call EasyMotion#S(-1,0,1)
xnoremap <silent> <Plug>(easymotion-sl) :call EasyMotion#SL(1,1,2)
nnoremap <silent> <Plug>(easymotion-sl) :call EasyMotion#SL(1,0,2)
snoremap <silent> <Plug>(easymotion-sl) :call EasyMotion#SL(1,0,2)
onoremap <silent> <Plug>(easymotion-sl) :call EasyMotion#SL(1,0,2)
xnoremap <silent> <Plug>(easymotion-Fl) :call EasyMotion#SL(1,1,1)
nnoremap <silent> <Plug>(easymotion-Fl) :call EasyMotion#SL(1,0,1)
snoremap <silent> <Plug>(easymotion-Fl) :call EasyMotion#SL(1,0,1)
onoremap <silent> <Plug>(easymotion-Fl) :call EasyMotion#SL(1,0,1)
xnoremap <silent> <Plug>(easymotion-sl2) :call EasyMotion#SL(2,1,2)
nnoremap <silent> <Plug>(easymotion-sl2) :call EasyMotion#SL(2,0,2)
snoremap <silent> <Plug>(easymotion-sl2) :call EasyMotion#SL(2,0,2)
onoremap <silent> <Plug>(easymotion-sl2) :call EasyMotion#SL(2,0,2)
xnoremap <silent> <Plug>(easymotion-bd-fln) :call EasyMotion#SL(-1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-fln) :call EasyMotion#SL(-1,0,2)
snoremap <silent> <Plug>(easymotion-bd-fln) :call EasyMotion#SL(-1,0,2)
onoremap <silent> <Plug>(easymotion-bd-fln) :call EasyMotion#SL(-1,0,2)
xnoremap <silent> <Plug>(easymotion-F) :call EasyMotion#S(1,1,1)
nnoremap <silent> <Plug>(easymotion-F) :call EasyMotion#S(1,0,1)
snoremap <silent> <Plug>(easymotion-F) :call EasyMotion#S(1,0,1)
onoremap <silent> <Plug>(easymotion-F) :call EasyMotion#S(1,0,1)
xnoremap <silent> <Plug>(easymotion-bd-f) :call EasyMotion#S(1,1,2)
nnoremap <silent> <Plug>(easymotion-bd-f) :call EasyMotion#S(1,0,2)
snoremap <silent> <Plug>(easymotion-bd-f) :call EasyMotion#S(1,0,2)
onoremap <silent> <Plug>(easymotion-bd-f) :call EasyMotion#S(1,0,2)
xnoremap <silent> <Plug>(easymotion-F2) :call EasyMotion#S(2,1,1)
nnoremap <silent> <Plug>(easymotion-F2) :call EasyMotion#S(2,0,1)
snoremap <silent> <Plug>(easymotion-F2) :call EasyMotion#S(2,0,1)
onoremap <silent> <Plug>(easymotion-F2) :call EasyMotion#S(2,0,1)
xnoremap <silent> <Plug>(easymotion-bd-f2) :call EasyMotion#S(2,1,2)
nnoremap <silent> <Plug>(easymotion-bd-f2) :call EasyMotion#S(2,0,2)
snoremap <silent> <Plug>(easymotion-bd-f2) :call EasyMotion#S(2,0,2)
onoremap <silent> <Plug>(easymotion-bd-f2) :call EasyMotion#S(2,0,2)
xnoremap <silent> <Plug>(easymotion-Tl2) :call EasyMotion#TL(2,1,1)
nnoremap <silent> <Plug>(easymotion-Tl2) :call EasyMotion#TL(2,0,1)
snoremap <silent> <Plug>(easymotion-Tl2) :call EasyMotion#TL(2,0,1)
onoremap <silent> <Plug>(easymotion-Tl2) :call EasyMotion#TL(2,0,1)
xnoremap <silent> <Plug>(easymotion-fln) :call EasyMotion#SL(-1,1,0)
nnoremap <silent> <Plug>(easymotion-fln) :call EasyMotion#SL(-1,0,0)
snoremap <silent> <Plug>(easymotion-fln) :call EasyMotion#SL(-1,0,0)
onoremap <silent> <Plug>(easymotion-fln) :call EasyMotion#SL(-1,0,0)
nnoremap <silent> <Plug>SurroundRepeat .
nnoremap <silent> <Plug>TComment_gc9c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc9cg@
nnoremap <silent> <Plug>TComment_gc8c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc8cg@
nnoremap <silent> <Plug>TComment_gc7c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc7cg@
nnoremap <silent> <Plug>TComment_gc6c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc6cg@
nnoremap <silent> <Plug>TComment_gc5c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc5cg@
nnoremap <silent> <Plug>TComment_gc4c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc4cg@
nnoremap <silent> <Plug>TComment_gc3c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc3cg@
nnoremap <silent> <Plug>TComment_gc2c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc2cg@
nnoremap <silent> <Plug>TComment_gc1c :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc1cg@
vnoremap <Plug>TComment_9 :call tcomment#SetOption("count", 9)
nnoremap <Plug>TComment_9 :call tcomment#SetOption("count", 9)
onoremap <Plug>TComment_9 :call tcomment#SetOption("count", 9)
vnoremap <Plug>TComment_8 :call tcomment#SetOption("count", 8)
nnoremap <Plug>TComment_8 :call tcomment#SetOption("count", 8)
onoremap <Plug>TComment_8 :call tcomment#SetOption("count", 8)
vnoremap <Plug>TComment_7 :call tcomment#SetOption("count", 7)
nnoremap <Plug>TComment_7 :call tcomment#SetOption("count", 7)
onoremap <Plug>TComment_7 :call tcomment#SetOption("count", 7)
vnoremap <Plug>TComment_6 :call tcomment#SetOption("count", 6)
nnoremap <Plug>TComment_6 :call tcomment#SetOption("count", 6)
onoremap <Plug>TComment_6 :call tcomment#SetOption("count", 6)
vnoremap <Plug>TComment_5 :call tcomment#SetOption("count", 5)
nnoremap <Plug>TComment_5 :call tcomment#SetOption("count", 5)
onoremap <Plug>TComment_5 :call tcomment#SetOption("count", 5)
vnoremap <Plug>TComment_4 :call tcomment#SetOption("count", 4)
nnoremap <Plug>TComment_4 :call tcomment#SetOption("count", 4)
onoremap <Plug>TComment_4 :call tcomment#SetOption("count", 4)
vnoremap <Plug>TComment_3 :call tcomment#SetOption("count", 3)
nnoremap <Plug>TComment_3 :call tcomment#SetOption("count", 3)
onoremap <Plug>TComment_3 :call tcomment#SetOption("count", 3)
vnoremap <Plug>TComment_2 :call tcomment#SetOption("count", 2)
nnoremap <Plug>TComment_2 :call tcomment#SetOption("count", 2)
onoremap <Plug>TComment_2 :call tcomment#SetOption("count", 2)
vnoremap <Plug>TComment_1 :call tcomment#SetOption("count", 1)
nnoremap <Plug>TComment_1 :call tcomment#SetOption("count", 1)
onoremap <Plug>TComment_1 :call tcomment#SetOption("count", 1)
nnoremap <silent> <Plug>TComment_gc :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gcg@
xnoremap <Plug>TComment_gc :TCommentMaybeInline
nnoremap <silent> <Plug>TComment_gcb :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gcbg@
nnoremap <silent> <Plug>TComment_gcc :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gccg@$
noremap <Plug>TComment_ic :call tcomment#TextObjectInlineComment()
xnoremap <silent> <Plug>TComment_Comment :if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | '<,'>TCommentMaybeInline!
nnoremap <silent> <Plug>TComment_Commentb :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentbg@
nnoremap <silent> <Plug>TComment_Commentc :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentcg@$
nnoremap <silent> <Plug>TComment_Comment :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentg@
xnoremap <silent> <Plug>TComment_Uncomment :if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | call tcomment#SetOption("mode_extra", "U") | '<,'>TCommentMaybeInline
nnoremap <silent> <Plug>TComment_Uncommentb :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentbg@
nnoremap <silent> <Plug>TComment_Uncommentc :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentcg@$
nnoremap <silent> <Plug>TComment_Uncomment :call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentg@
noremap <Plug>TComment_\_s :TCommentAs =&ft_
noremap <Plug>TComment_\_n :TCommentAs =&ft 
noremap <Plug>TComment_\_a :TCommentAs 
noremap <Plug>TComment_\_b :TCommentBlock
noremap <Plug>TComment_\_r :TCommentRight
xnoremap <Plug>TComment_\_i :TCommentInline
noremap <Plug>TComment_\_  :TComment 
noremap <Plug>TComment_\_p vip:TComment
xnoremap <Plug>TComment_\__ :TCommentMaybeInline
nnoremap <Plug>TComment_\__ :TComment
snoremap <Plug>TComment_\__ :TComment
onoremap <Plug>TComment_\__ :TComment
noremap <Plug>TComment_ca :call tcomment#SetOption("as", input("Comment as: ", &filetype, "customlist,tcomment#Complete"))
noremap <Plug>TComment_cc :call tcomment#SetOption("count", v:count1)
noremap <Plug>TComment_s :TCommentAs =&ft_
noremap <Plug>TComment_n :TCommentAs =&ft 
noremap <Plug>TComment_a :TCommentAs 
noremap <Plug>TComment_b :TCommentBlock
noremap <Plug>TComment_i v:TCommentInline mode=I#
noremap <Plug>TComment_r :TCommentRight
noremap <Plug>TComment_  :TComment 
noremap <Plug>TComment_p m`vip:TComment``
vnoremap <Plug>TComment_ :TCommentMaybeInline
nnoremap <Plug>TComment_ :TComment
onoremap <Plug>TComment_ :TComment
nnoremap <SNR>39_: :=v:count ? v:count : ''
nnoremap <F12> :set nofen
nnoremap <F10> :set fen | set foldmethod=syntax
nnoremap <F9> :set fen | set foldmethod=indent
nnoremap <F8> :Make
nnoremap <F7> :TagbarToggle
nnoremap <F6> :ClangFormatAutoToggle
nnoremap <F3> :NumbersToggle
map <S-Insert> <MiddleMouse>
inoremap  
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <expr> 	 pumvisible() ? "\" : "\	"
inoremap <silent> <NL> =UltiSnips#ExpandSnippetOrJump()
imap  
imap 9 <Plug>TComment_9
imap 8 <Plug>TComment_8
imap 7 <Plug>TComment_7
imap 6 <Plug>TComment_6
imap 5 <Plug>TComment_5
imap 4 <Plug>TComment_4
imap 3 <Plug>TComment_3
imap 2 <Plug>TComment_2
imap 1 <Plug>TComment_1
imap s <Plug>TComment_s
imap n <Plug>TComment_n
imap a <Plug>TComment_a
imap b <Plug>TComment_b
imap i <Plug>TComment_i
imap r <Plug>TComment_r
imap   <Plug>TComment_ 
imap p <Plug>TComment_p
imap  <Plug>TComment_
cnoremap <expr> ! loupe#private#very_magic_slash('!')
cnoremap <expr> # loupe#private#very_magic_slash('#')
cnoremap <expr> $ loupe#private#very_magic_slash('$')
cnoremap <expr> % loupe#private#very_magic_slash('%')
cnoremap <expr> & loupe#private#very_magic_slash('&')
cnoremap <expr> ' loupe#private#very_magic_slash("'")
cnoremap <expr> ( loupe#private#very_magic_slash('(')
cnoremap <expr> ) loupe#private#very_magic_slash(')')
cnoremap <expr> * loupe#private#very_magic_slash('*')
cnoremap <expr> + loupe#private#very_magic_slash('+')
cnoremap <expr> , loupe#private#very_magic_slash(',')
cnoremap <expr> - loupe#private#very_magic_slash('-')
cnoremap <expr> . loupe#private#very_magic_slash('.')
cnoremap <expr> / loupe#private#very_magic_slash('/')
cnoremap <expr> : loupe#private#very_magic_slash(':')
cnoremap <expr> ; loupe#private#very_magic_slash(';')
cnoremap <expr> < loupe#private#very_magic_slash('<')
cnoremap <expr> = loupe#private#very_magic_slash('=')
cnoremap <expr> > loupe#private#very_magic_slash('>')
cnoremap <expr> ? loupe#private#very_magic_slash('?')
cnoremap <expr> @ loupe#private#very_magic_slash('@')
nmap ë <Plug>MoveLineUp
nmap ê <Plug>MoveLineDown
xmap ë <Plug>MoveBlockUp
xmap ê <Plug>MoveBlockDown
nnoremap <silent> ì :wincmd l
xnoremap <silent> ì :wincmd l
onoremap <silent> ì :wincmd l
onoremap <silent> ë :wincmd k
onoremap <silent> ê :wincmd j
nnoremap <silent> è :wincmd h
xnoremap <silent> è :wincmd h
onoremap <silent> è :wincmd h
nmap пЁ g~
xmap пЁ g~
omap пЁ g~
nmap пч gx
xmap пч gx
omap пч gx
nmap пц gw
xmap пц gw
omap пц gw
nmap пм gv
xmap пм gv
omap пм gv
nmap пг gu
xmap пг gu
omap пг gu
nmap пе gt
xmap пе gt
omap пе gt
nmap пы gs
xmap пы gs
omap пы gs
nmap пк gr
xmap пк gr
omap пк gr
nmap пй gq
xmap пй gq
omap пй gq
nmap пз gp
xmap пз gp
omap пз gp
nmap пщ go
xmap пщ go
omap пщ go
nmap пь gm
xmap пь gm
omap пь gm
nmap пт gn
xmap пт gn
omap пт gn
nmap пл gk
xmap пл gk
omap пл gk
nmap по gj
xmap по gj
omap по gj
nmap пш gi
xmap пш gi
omap пш gi
nmap пр gh
xmap пр gh
omap пр gh
nmap пп gg
xmap пп gg
omap пп gg
nmap пА gF
xmap пА gF
omap пА gF
nmap па gf
xmap па gf
omap па gf
nmap пу ge
xmap пу ge
omap пу ge
nmap пв gd
xmap пв gd
omap пв gd
nmap пф ga
xmap пф ga
omap пф ga
nmap пъ g]
xmap пъ g]
omap пъ g]
nmap пМ gV
xmap пМ gV
omap пМ gV
nmap пГ gU
xmap пГ gU
omap пГ gU
nmap пЕ gT
xmap пЕ gT
omap пЕ gT
nmap пК gR
xmap пК gR
omap пК gR
nmap пЙ gQ
xmap пЙ gQ
omap пЙ gQ
nmap пЗ gP
xmap пЗ gP
omap пЗ gP
nmap пТ gN
xmap пТ gN
omap пТ gN
nmap пО gJ
xmap пО gJ
omap пО gJ
nmap пШ gI
xmap пШ gI
omap пШ gI
nmap пР gH
xmap пР gH
omap пР gH
nmap пУ gE
xmap пУ gE
omap пУ gE
nmap пВ gD
xmap пВ gD
omap пВ gD
nmap пБ g<
xmap пБ g<
omap пБ g<
nmap Эя "z
xmap Эя "z
omap Эя "z
nmap Эн "y
xmap Эн "y
omap Эн "y
nmap Эч "x
xmap Эч "x
omap Эч "x
nmap Эц "w
xmap Эц "w
omap Эц "w
nmap Эм "v
xmap Эм "v
omap Эм "v
nmap Эг "u
xmap Эг "u
omap Эг "u
nmap Эе "t
xmap Эе "t
omap Эе "t
nmap Эы "s
xmap Эы "s
omap Эы "s
nmap Эк "r
xmap Эк "r
omap Эк "r
nmap Эй "q
xmap Эй "q
omap Эй "q
nmap Эз "p
xmap Эз "p
omap Эз "p
nmap Эщ "o
xmap Эщ "o
omap Эщ "o
nmap Эт "n
xmap Эт "n
omap Эт "n
nmap Эь "m
xmap Эь "m
omap Эь "m
nmap Эд "l
xmap Эд "l
omap Эд "l
nmap Эл "k
xmap Эл "k
omap Эл "k
nmap Эо "j
xmap Эо "j
omap Эо "j
nmap Эш "i
xmap Эш "i
omap Эш "i
nmap Эр "h
xmap Эр "h
omap Эр "h
nmap Эп "g
xmap Эп "g
omap Эп "g
nmap Эа "f
xmap Эа "f
omap Эа "f
nmap Эу "e
xmap Эу "e
omap Эу "e
nmap Эв "d
xmap Эв "d
omap Эв "d
nmap Эс "c
xmap Эс "c
omap Эс "c
nmap Эи "b
xmap Эи "b
omap Эи "b
nmap Эф "a
xmap Эф "a
omap Эф "a
nmap ЭЯ "Z
xmap ЭЯ "Z
omap ЭЯ "Z
nmap ЭН "Y
xmap ЭН "Y
omap ЭН "Y
nmap ЭЧ "X
xmap ЭЧ "X
omap ЭЧ "X
nmap ЭЦ "W
xmap ЭЦ "W
omap ЭЦ "W
nmap ЭМ "V
xmap ЭМ "V
omap ЭМ "V
nmap ЭГ "U
xmap ЭГ "U
omap ЭГ "U
nmap ЭЕ "T
xmap ЭЕ "T
omap ЭЕ "T
nmap ЭЫ "S
xmap ЭЫ "S
omap ЭЫ "S
nmap ЭК "R
xmap ЭК "R
omap ЭК "R
nmap ЭЙ "Q
xmap ЭЙ "Q
omap ЭЙ "Q
nmap ЭЗ "P
xmap ЭЗ "P
omap ЭЗ "P
nmap ЭЩ "O
xmap ЭЩ "O
omap ЭЩ "O
nmap ЭТ "N
xmap ЭТ "N
omap ЭТ "N
nmap ЭЬ "M
xmap ЭЬ "M
omap ЭЬ "M
nmap ЭД "L
xmap ЭД "L
omap ЭД "L
nmap ЭЛ "K
xmap ЭЛ "K
omap ЭЛ "K
nmap ЭО "J
xmap ЭО "J
omap ЭО "J
nmap ЭШ "I
xmap ЭШ "I
omap ЭШ "I
nmap ЭР "H
xmap ЭР "H
omap ЭР "H
nmap ЭП "G
xmap ЭП "G
omap ЭП "G
nmap ЭА "F
xmap ЭА "F
omap ЭА "F
nmap ЭУ "E
xmap ЭУ "E
omap ЭУ "E
nmap ЭВ "D
xmap ЭВ "D
omap ЭВ "D
nmap ЭС "C
xmap ЭС "C
omap ЭС "C
nmap ЭИ "B
xmap ЭИ "B
omap ЭИ "B
nmap ЭФ "A
xmap ЭФ "A
omap ЭФ "A
nmap Эю ".
xmap Эю ".
omap Эю ".
nmap ЭЖ ":
xmap ЭЖ ":
omap ЭЖ ":
nmap ЭЭ ""
xmap ЭЭ ""
omap ЭЭ ""
nmap пэя g'z
xmap пэя g'z
omap пэя g'z
nmap пёя g`z
xmap пёя g`z
omap пёя g`z
nmap пэн g'y
xmap пэн g'y
omap пэн g'y
nmap пён g`y
xmap пён g`y
omap пён g`y
nmap пэч g'x
xmap пэч g'x
omap пэч g'x
nmap пёч g`x
xmap пёч g`x
omap пёч g`x
nmap пэц g'w
xmap пэц g'w
omap пэц g'w
nmap пёц g`w
xmap пёц g`w
omap пёц g`w
nmap пэм g'v
xmap пэм g'v
omap пэм g'v
nmap пём g`v
xmap пём g`v
omap пём g`v
nmap пэг g'u
xmap пэг g'u
omap пэг g'u
nmap пёг g`u
xmap пёг g`u
omap пёг g`u
nmap пэе g't
xmap пэе g't
omap пэе g't
nmap пёе g`t
xmap пёе g`t
omap пёе g`t
nmap пэы g's
xmap пэы g's
omap пэы g's
nmap пёы g`s
xmap пёы g`s
omap пёы g`s
nmap пэк g'r
xmap пэк g'r
omap пэк g'r
nmap пёк g`r
xmap пёк g`r
omap пёк g`r
nmap пэй g'q
xmap пэй g'q
omap пэй g'q
nmap пёй g`q
xmap пёй g`q
omap пёй g`q
nmap пэз g'p
xmap пэз g'p
omap пэз g'p
nmap пёз g`p
xmap пёз g`p
omap пёз g`p
nmap пэщ g'o
xmap пэщ g'o
omap пэщ g'o
nmap пёщ g`o
xmap пёщ g`o
omap пёщ g`o
nmap пэт g'n
xmap пэт g'n
omap пэт g'n
nmap пёт g`n
xmap пёт g`n
omap пёт g`n
nmap пэь g'm
xmap пэь g'm
omap пэь g'm
nmap пёь g`m
xmap пёь g`m
omap пёь g`m
nmap пэд g'l
xmap пэд g'l
omap пэд g'l
nmap пёд g`l
xmap пёд g`l
omap пёд g`l
nmap пэл g'k
xmap пэл g'k
omap пэл g'k
nmap пёл g`k
xmap пёл g`k
omap пёл g`k
nmap пэо g'j
xmap пэо g'j
omap пэо g'j
nmap пёо g`j
xmap пёо g`j
omap пёо g`j
nmap пэш g'i
xmap пэш g'i
omap пэш g'i
nmap пёш g`i
xmap пёш g`i
omap пёш g`i
nmap пэр g'h
xmap пэр g'h
omap пэр g'h
nmap пёр g`h
xmap пёр g`h
omap пёр g`h
nmap пэп g'g
xmap пэп g'g
omap пэп g'g
nmap пёп g`g
xmap пёп g`g
omap пёп g`g
nmap пэа g'f
xmap пэа g'f
omap пэа g'f
nmap пёа g`f
xmap пёа g`f
omap пёа g`f
nmap пэу g'e
xmap пэу g'e
omap пэу g'e
nmap пёу g`e
xmap пёу g`e
omap пёу g`e
nmap пэв g'd
xmap пэв g'd
omap пэв g'd
nmap пёв g`d
xmap пёв g`d
omap пёв g`d
nmap пэс g'c
xmap пэс g'c
omap пэс g'c
nmap пёс g`c
xmap пёс g`c
omap пёс g`c
nmap пэи g'b
xmap пэи g'b
omap пэи g'b
nmap пёи g`b
xmap пёи g`b
omap пёи g`b
nmap пэф g'a
xmap пэф g'a
omap пэф g'a
nmap пёф g`a
xmap пёф g`a
omap пёф g`a
nmap пэЯ g'Z
xmap пэЯ g'Z
omap пэЯ g'Z
nmap пёЯ g`Z
xmap пёЯ g`Z
omap пёЯ g`Z
nmap пэН g'Y
xmap пэН g'Y
omap пэН g'Y
nmap пёН g`Y
xmap пёН g`Y
omap пёН g`Y
nmap пэЧ g'X
xmap пэЧ g'X
omap пэЧ g'X
nmap пёЧ g`X
xmap пёЧ g`X
omap пёЧ g`X
nmap пэЦ g'W
xmap пэЦ g'W
omap пэЦ g'W
nmap пёЦ g`W
xmap пёЦ g`W
omap пёЦ g`W
nmap пэМ g'V
xmap пэМ g'V
omap пэМ g'V
nmap пёМ g`V
xmap пёМ g`V
omap пёМ g`V
nmap пэГ g'U
xmap пэГ g'U
omap пэГ g'U
nmap пёГ g`U
xmap пёГ g`U
omap пёГ g`U
nmap пэЕ g'T
xmap пэЕ g'T
omap пэЕ g'T
nmap пёЕ g`T
xmap пёЕ g`T
omap пёЕ g`T
nmap пэЫ g'S
xmap пэЫ g'S
omap пэЫ g'S
nmap пёЫ g`S
xmap пёЫ g`S
omap пёЫ g`S
nmap пэК g'R
xmap пэК g'R
omap пэК g'R
nmap пёК g`R
xmap пёК g`R
omap пёК g`R
nmap пэЙ g'Q
xmap пэЙ g'Q
omap пэЙ g'Q
nmap пёЙ g`Q
xmap пёЙ g`Q
omap пёЙ g`Q
nmap пэЗ g'P
xmap пэЗ g'P
omap пэЗ g'P
nmap пёЗ g`P
xmap пёЗ g`P
omap пёЗ g`P
nmap пэЩ g'O
xmap пэЩ g'O
omap пэЩ g'O
nmap пёЩ g`O
xmap пёЩ g`O
omap пёЩ g`O
nmap пэТ g'N
xmap пэТ g'N
omap пэТ g'N
nmap пёТ g`N
xmap пёТ g`N
omap пёТ g`N
nmap пэЬ g'M
xmap пэЬ g'M
omap пэЬ g'M
nmap пёЬ g`M
xmap пёЬ g`M
omap пёЬ g`M
nmap пэД g'L
xmap пэД g'L
omap пэД g'L
nmap пёД g`L
xmap пёД g`L
omap пёД g`L
nmap пэЛ g'K
xmap пэЛ g'K
omap пэЛ g'K
nmap пёЛ g`K
xmap пёЛ g`K
omap пёЛ g`K
nmap пэО g'J
xmap пэО g'J
omap пэО g'J
nmap пёО g`J
xmap пёО g`J
omap пёО g`J
nmap пэШ g'I
xmap пэШ g'I
omap пэШ g'I
nmap пёШ g`I
xmap пёШ g`I
omap пёШ g`I
nmap пэР g'H
xmap пэР g'H
omap пэР g'H
nmap пёР g`H
xmap пёР g`H
omap пёР g`H
nmap пэП g'G
xmap пэП g'G
omap пэП g'G
nmap пёП g`G
xmap пёП g`G
omap пёП g`G
nmap пэА g'F
xmap пэА g'F
omap пэА g'F
nmap пёА g`F
xmap пёА g`F
omap пёА g`F
nmap пэУ g'E
xmap пэУ g'E
omap пэУ g'E
nmap пёУ g`E
xmap пёУ g`E
omap пёУ g`E
nmap пэВ g'D
xmap пэВ g'D
omap пэВ g'D
nmap пёВ g`D
xmap пёВ g`D
omap пёВ g`D
nmap пэС g'C
xmap пэС g'C
omap пэС g'C
nmap пёС g`C
xmap пёС g`C
omap пёС g`C
nmap пэИ g'B
xmap пэИ g'B
omap пэИ g'B
nmap пёИ g`B
xmap пёИ g`B
omap пёИ g`B
nmap пэФ g'A
xmap пэФ g'A
omap пэФ g'A
nmap пёФ g`A
xmap пёФ g`A
omap пёФ g`A
nmap й, q?
xmap й, q?
omap й, q?
nmap й. q/
xmap й. q/
omap й. q/
nmap йЖ q:
xmap йЖ q:
omap йЖ q:
nmap ЯЙ ZQ
xmap ЯЙ ZQ
omap ЯЙ ZQ
nmap ЯЯ ZZ
xmap ЯЯ ZZ
omap ЯЯ ZZ
nmap Ю >
xmap Ю >
omap Ю >
nmap Б <
xmap Б <
omap Б <
nmap Ь M
xmap Ь M
omap Ь M
nmap Т N
xmap Т N
omap Т N
nmap И B
xmap И B
omap И B
nmap М V
xmap М V
omap М V
nmap С C
xmap С C
omap С C
nmap Ч X
xmap Ч X
omap Ч X
nmap Я Z
xmap Я Z
omap Я Z
nmap Є "
xmap Є "
omap Є "
nmap Э "
xmap Э "
omap Э "
nmap Ж :
xmap Ж :
omap Ж :
nmap Д L
xmap Д L
omap Д L
nmap Л K
xmap Л K
omap Л K
nmap О J
xmap О J
omap О J
nmap Р H
xmap Р H
omap Р H
nmap П G
xmap П G
omap П G
nmap А F
xmap А F
omap А F
nmap В D
xmap В D
omap В D
nmap І S
xmap І S
omap І S
nmap Ы S
xmap Ы S
omap Ы S
nmap Ф A
xmap Ф A
omap Ф A
nmap Ї }
xmap Ї }
omap Ї }
nmap Ъ }
xmap Ъ }
omap Ъ }
nmap Х {
xmap Х {
omap Х {
nmap З P
xmap З P
omap З P
nmap Щ O
xmap Щ O
omap Щ O
nmap Ш I
xmap Ш I
omap Ш I
nmap Г U
xmap Г U
omap Г U
nmap Н Y
xmap Н Y
omap Н Y
nmap Е T
xmap Е T
omap Е T
nmap К R
xmap К R
omap К R
nmap У E
xmap У E
omap У E
nmap Ц W
xmap Ц W
omap Ц W
nmap Й Q
xmap Й Q
omap Й Q
nmap Ё ~
xmap Ё ~
omap Ё ~
nmap б ,
xmap б ,
omap б ,
nmap и b
xmap и b
omap и b
nmap м v
xmap м v
omap м v
nmap ж ;
xmap ж ;
omap ж ;
nmap д l
xmap д l
omap д l
nmap л k
xmap л k
omap л k
nmap о j
xmap о j
omap о j
nmap п g
xmap п g
omap п g
nmap а f
xmap а f
omap а f
nmap в d
xmap в d
omap в d
nmap з p
xmap з p
omap з p
nmap г u
xmap г u
omap г u
nmap н y
xmap н y
omap н y
nmap е t
xmap е t
omap е t
nmap к r
xmap к r
omap к r
nmap й q
xmap й q
omap й q
nmap шЪ i}
xmap шЪ i}
omap шЪ i}
nmap фЪ a}
xmap фЪ a}
omap фЪ a}
nmap шХ i{
xmap шХ i{
omap шХ i{
nmap фХ a{
xmap фХ a{
omap фХ a{
nmap шц iw
xmap шц iw
omap шц iw
nmap фц aw
xmap фц aw
omap фц aw
nmap ше it
xmap ше it
omap ше it
nmap фе at
xmap фе at
omap фе at
nmap шы is
xmap шы is
omap шы is
nmap фы as
xmap фы as
omap фы as
nmap шз ip
xmap шз ip
omap шз ip
nmap фз ap
xmap фз ap
omap фз ap
nmap ши ib
xmap ши ib
omap ши ib
nmap фи ab
xmap фи ab
omap фи ab
nmap шё i`
xmap шё i`
omap шё i`
nmap фё a`
xmap фё a`
omap фё a`
nmap шъ i]
xmap шъ i]
omap шъ i]
nmap фъ a]
xmap фъ a]
omap фъ a]
nmap шх i[
xmap шх i[
omap шх i[
nmap фх a[
xmap фх a[
omap фх a[
nmap шЦ iW
xmap шЦ iW
omap шЦ iW
nmap фЦ aW
xmap фЦ aW
omap фЦ aW
nmap шИ iB
xmap шИ iB
omap шИ iB
nmap фИ aB
xmap фИ aB
omap фИ aB
nmap шЮ i>
xmap шЮ i>
omap шЮ i>
nmap фЮ a>
xmap фЮ a>
omap фЮ a>
nmap шБ i<
xmap шБ i<
omap шБ i<
nmap фБ a<
xmap фБ a<
omap фБ a<
nmap шэ i'
xmap шэ i'
omap шэ i'
nmap фэ a'
xmap фэ a'
omap фэ a'
nmap шЭ i"
xmap шЭ i"
omap шЭ i"
nmap фЭ a"
xmap фЭ a"
omap фЭ a"
nmap яя zz
xmap яя zz
omap яя zz
nmap яч zx
xmap яч zx
omap яч zx
nmap яц zw
xmap яц zw
omap яц zw
nmap ям zv
xmap ям zv
omap ям zv
nmap яе zt
xmap яе zt
omap яе zt
nmap яы zs
xmap яы zs
omap яы zs
nmap як zr
xmap як zr
omap як zr
nmap ящ zo
xmap ящ zo
omap ящ zo
nmap ят zn
xmap ят zn
omap ят zn
nmap яь zm
xmap яь zm
omap яь zm
nmap яд zl
xmap яд zl
omap яд zl
nmap ял zk
xmap ял zk
omap ял zk
nmap яо zj
xmap яо zj
omap яо zj
nmap яш zi
xmap яш zi
omap яш zi
nmap яр zh
xmap яр zh
omap яр zh
nmap яп zg
xmap яп zg
omap яп zg
nmap яа zf
xmap яа zf
omap яа zf
nmap яу ze
xmap яу ze
omap яу ze
nmap яв zd
xmap яв zd
omap яв zd
nmap яс zc
xmap яс zc
omap яс zc
nmap яи zb
xmap яи zb
omap яи zb
nmap яф za
xmap яф za
omap яф za
nmap яЧ zX
xmap яЧ zX
omap яЧ zX
nmap яЦ zW
xmap яЦ zW
omap яЦ zW
nmap яК zR
xmap яК zR
omap яК zR
nmap яЩ zO
xmap яЩ zO
omap яЩ zO
nmap яТ zN
xmap яТ zN
omap яТ zN
nmap яЬ zM
xmap яЬ zM
omap яЬ zM
nmap яД zL
xmap яД zL
omap яД zL
nmap яР zH
xmap яР zH
omap яР zH
nmap яП zG
xmap яП zG
omap яП zG
nmap яА zF
xmap яА zF
omap яА zF
nmap яУ zE
xmap яУ zE
omap яУ zE
nmap яВ zD
xmap яВ zD
omap яВ zD
nmap яС zC
xmap яС zC
omap яС zC
nmap яФ zA
xmap яФ zA
omap яФ zA
nmap яю z.
xmap яю z.
omap яю z.
nmap эя 'z
xmap эя 'z
omap эя 'z
nmap ёя `z
xmap ёя `z
omap ёя `z
nmap ья mz
xmap ья mz
omap ья mz
nmap эн 'y
xmap эн 'y
omap эн 'y
nmap ён `y
xmap ён `y
omap ён `y
nmap ьн my
xmap ьн my
omap ьн my
nmap эч 'x
xmap эч 'x
omap эч 'x
nmap ёч `x
xmap ёч `x
omap ёч `x
nmap ьч mx
xmap ьч mx
omap ьч mx
nmap эц 'w
xmap эц 'w
omap эц 'w
nmap ёц `w
xmap ёц `w
omap ёц `w
nmap ьц mw
xmap ьц mw
omap ьц mw
nmap эм 'v
xmap эм 'v
omap эм 'v
nmap ём `v
xmap ём `v
omap ём `v
nmap ьм mv
xmap ьм mv
omap ьм mv
nmap эг 'u
xmap эг 'u
omap эг 'u
nmap ёг `u
xmap ёг `u
omap ёг `u
nmap ьг mu
xmap ьг mu
omap ьг mu
nmap эе 't
xmap эе 't
omap эе 't
nmap ёе `t
xmap ёе `t
omap ёе `t
nmap ье mt
xmap ье mt
omap ье mt
nmap эы 's
xmap эы 's
omap эы 's
nmap ёы `s
xmap ёы `s
omap ёы `s
nmap ьы ms
xmap ьы ms
omap ьы ms
nmap эк 'r
xmap эк 'r
omap эк 'r
nmap ёк `r
xmap ёк `r
omap ёк `r
nmap ьк mr
xmap ьк mr
omap ьк mr
nmap эй 'q
xmap эй 'q
omap эй 'q
nmap ёй `q
xmap ёй `q
omap ёй `q
nmap ьй mq
xmap ьй mq
omap ьй mq
nmap эз 'p
xmap эз 'p
omap эз 'p
nmap ёз `p
xmap ёз `p
omap ёз `p
nmap ьз mp
xmap ьз mp
omap ьз mp
nmap эщ 'o
xmap эщ 'o
omap эщ 'o
nmap ёщ `o
xmap ёщ `o
omap ёщ `o
nmap ьщ mo
xmap ьщ mo
omap ьщ mo
nmap эт 'n
xmap эт 'n
omap эт 'n
nmap ёт `n
xmap ёт `n
omap ёт `n
nmap ьт mn
xmap ьт mn
omap ьт mn
nmap эь 'm
xmap эь 'm
omap эь 'm
nmap ёь `m
xmap ёь `m
omap ёь `m
nmap ьь mm
xmap ьь mm
omap ьь mm
nmap эд 'l
xmap эд 'l
omap эд 'l
nmap ёд `l
xmap ёд `l
omap ёд `l
nmap ьд ml
xmap ьд ml
omap ьд ml
nmap эл 'k
xmap эл 'k
omap эл 'k
nmap ёл `k
xmap ёл `k
omap ёл `k
nmap ьл mk
xmap ьл mk
omap ьл mk
nmap эо 'j
xmap эо 'j
omap эо 'j
nmap ёо `j
xmap ёо `j
omap ёо `j
nmap ьо mj
xmap ьо mj
omap ьо mj
nmap эш 'i
xmap эш 'i
omap эш 'i
nmap ёш `i
xmap ёш `i
omap ёш `i
nmap ьш mi
xmap ьш mi
omap ьш mi
nmap эр 'h
xmap эр 'h
omap эр 'h
nmap ёр `h
xmap ёр `h
omap ёр `h
nmap ьр mh
xmap ьр mh
omap ьр mh
nmap эп 'g
xmap эп 'g
omap эп 'g
nmap ёп `g
xmap ёп `g
omap ёп `g
nmap ьп mg
xmap ьп mg
omap ьп mg
nmap эа 'f
xmap эа 'f
omap эа 'f
nmap ёа `f
xmap ёа `f
omap ёа `f
nmap ьа mf
xmap ьа mf
omap ьа mf
nmap эу 'e
xmap эу 'e
omap эу 'e
nmap ёу `e
xmap ёу `e
omap ёу `e
nmap ьу me
xmap ьу me
omap ьу me
nmap эв 'd
xmap эв 'd
omap эв 'd
nmap ёв `d
xmap ёв `d
omap ёв `d
nmap ьв md
xmap ьв md
omap ьв md
nmap эс 'c
xmap эс 'c
omap эс 'c
nmap ёс `c
xmap ёс `c
omap ёс `c
nmap ьс mc
xmap ьс mc
omap ьс mc
nmap эи 'b
xmap эи 'b
omap эи 'b
nmap ёи `b
xmap ёи `b
omap ёи `b
nmap ьи mb
xmap ьи mb
omap ьи mb
nmap эф 'a
xmap эф 'a
omap эф 'a
nmap ёф `a
xmap ёф `a
omap ёф `a
nmap ьф ma
xmap ьф ma
omap ьф ma
nmap эЯ 'Z
xmap эЯ 'Z
omap эЯ 'Z
nmap ёЯ `Z
xmap ёЯ `Z
omap ёЯ `Z
nmap ьЯ mZ
xmap ьЯ mZ
omap ьЯ mZ
nmap эН 'Y
xmap эН 'Y
omap эН 'Y
nmap ёН `Y
xmap ёН `Y
omap ёН `Y
nmap ьН mY
xmap ьН mY
omap ьН mY
nmap эЧ 'X
xmap эЧ 'X
omap эЧ 'X
nmap ёЧ `X
xmap ёЧ `X
omap ёЧ `X
nmap ьЧ mX
xmap ьЧ mX
omap ьЧ mX
nmap эЦ 'W
xmap эЦ 'W
omap эЦ 'W
nmap ёЦ `W
xmap ёЦ `W
omap ёЦ `W
nmap ьЦ mW
xmap ьЦ mW
omap ьЦ mW
nmap эМ 'V
xmap эМ 'V
omap эМ 'V
nmap ёМ `V
xmap ёМ `V
omap ёМ `V
nmap ьМ mV
xmap ьМ mV
omap ьМ mV
nmap эГ 'U
xmap эГ 'U
omap эГ 'U
nmap ёГ `U
xmap ёГ `U
omap ёГ `U
nmap ьГ mU
xmap ьГ mU
omap ьГ mU
nmap эЕ 'T
xmap эЕ 'T
omap эЕ 'T
nmap ёЕ `T
xmap ёЕ `T
omap ёЕ `T
nmap ьЕ mT
xmap ьЕ mT
omap ьЕ mT
nmap эЫ 'S
xmap эЫ 'S
omap эЫ 'S
nmap ёЫ `S
xmap ёЫ `S
omap ёЫ `S
nmap ьЫ mS
xmap ьЫ mS
omap ьЫ mS
nmap эК 'R
xmap эК 'R
omap эК 'R
nmap ёК `R
xmap ёК `R
omap ёК `R
nmap ьК mR
xmap ьК mR
omap ьК mR
nmap эЙ 'Q
xmap эЙ 'Q
omap эЙ 'Q
nmap ёЙ `Q
xmap ёЙ `Q
omap ёЙ `Q
nmap ьЙ mQ
xmap ьЙ mQ
omap ьЙ mQ
nmap эЗ 'P
xmap эЗ 'P
omap эЗ 'P
nmap ёЗ `P
xmap ёЗ `P
omap ёЗ `P
nmap ьЗ mP
xmap ьЗ mP
omap ьЗ mP
nmap эЩ 'O
xmap эЩ 'O
omap эЩ 'O
nmap ёЩ `O
xmap ёЩ `O
omap ёЩ `O
nmap ьЩ mO
xmap ьЩ mO
omap ьЩ mO
nmap эТ 'N
xmap эТ 'N
omap эТ 'N
nmap ёТ `N
xmap ёТ `N
omap ёТ `N
nmap ьТ mN
xmap ьТ mN
omap ьТ mN
nmap эЬ 'M
xmap эЬ 'M
omap эЬ 'M
nmap ёЬ `M
xmap ёЬ `M
omap ёЬ `M
nmap ьЬ mM
xmap ьЬ mM
omap ьЬ mM
nmap эД 'L
xmap эД 'L
omap эД 'L
nmap ёД `L
xmap ёД `L
omap ёД `L
nmap ьД mL
xmap ьД mL
omap ьД mL
nmap эЛ 'K
xmap эЛ 'K
omap эЛ 'K
nmap ёЛ `K
xmap ёЛ `K
omap ёЛ `K
nmap ьЛ mK
xmap ьЛ mK
omap ьЛ mK
nmap эО 'J
xmap эО 'J
omap эО 'J
nmap ёО `J
xmap ёО `J
omap ёО `J
nmap ьО mJ
xmap ьО mJ
omap ьО mJ
nmap эШ 'I
xmap эШ 'I
omap эШ 'I
nmap ёШ `I
xmap ёШ `I
omap ёШ `I
nmap ьШ mI
xmap ьШ mI
omap ьШ mI
nmap эР 'H
xmap эР 'H
omap эР 'H
nmap ёР `H
xmap ёР `H
omap ёР `H
nmap ьР mH
xmap ьР mH
omap ьР mH
nmap эП 'G
xmap эП 'G
omap эП 'G
nmap ёП `G
xmap ёП `G
omap ёП `G
nmap ьП mG
xmap ьП mG
omap ьП mG
nmap эА 'F
xmap эА 'F
omap эА 'F
nmap ёА `F
xmap ёА `F
omap ёА `F
nmap ьА mF
xmap ьА mF
omap ьА mF
nmap эУ 'E
xmap эУ 'E
omap эУ 'E
nmap ёУ `E
xmap ёУ `E
omap ёУ `E
nmap ьУ mE
xmap ьУ mE
omap ьУ mE
nmap эВ 'D
xmap эВ 'D
omap эВ 'D
nmap ёВ `D
xmap ёВ `D
omap ёВ `D
nmap ьВ mD
xmap ьВ mD
omap ьВ mD
nmap эС 'C
xmap эС 'C
omap эС 'C
nmap ёС `C
xmap ёС `C
omap ёС `C
nmap ьС mC
xmap ьС mC
omap ьС mC
nmap эИ 'B
xmap эИ 'B
omap эИ 'B
nmap ёИ `B
xmap ёИ `B
omap ёИ `B
nmap ьИ mB
xmap ьИ mB
omap ьИ mB
nmap эФ 'A
xmap эФ 'A
omap эФ 'A
nmap ёФ `A
xmap ёФ `A
omap ёФ `A
nmap ьФ mA
xmap ьФ mA
omap ьФ mA
nmap ъХ ]{
xmap ъХ ]{
omap ъХ ]{
nmap ъя ]z
xmap ъя ]z
omap ъя ]z
nmap ъы ]s
xmap ъы ]s
omap ъы ]s
nmap ъз ]p
xmap ъз ]p
omap ъз ]p
nmap ъь ]m
xmap ъь ]m
omap ъь ]m
nmap ъш ]i
xmap ъш ]i
omap ъш ]i
nmap ъа ]f
xmap ъа ]f
omap ъа ]f
nmap ъв ]d
xmap ъв ]d
omap ъв ]d
nmap ъс ]c
xmap ъс ]c
omap ъс ]c
nmap ъъ ]]
xmap ъъ ]]
omap ъъ ]]
nmap ъх ][
xmap ъх ][
omap ъх ][
nmap ъЗ ]P
xmap ъЗ ]P
omap ъЗ ]P
nmap ъШ ]I
xmap ъШ ]I
omap ъШ ]I
nmap ъВ ]D
xmap ъВ ]D
omap ъВ ]D
nmap ъё ]`
xmap ъё ]`
omap ъё ]`
nmap ъэ ]'
xmap ъэ ]'
omap ъэ ]'
nmap хХ [{
xmap хХ [{
omap хХ [{
nmap хя [z
xmap хя [z
omap хя [z
nmap хы [s
xmap хы [s
omap хы [s
nmap хз [p
xmap хз [p
omap хз [p
nmap хь [m
xmap хь [m
omap хь [m
nmap хш [i
xmap хш [i
omap хш [i
nmap ха [f
xmap ха [f
omap ха [f
nmap хв [d
xmap хв [d
omap хв [d
nmap хс [c
xmap хс [c
omap хс [c
nmap хъ []
xmap хъ []
omap хъ []
nmap хх [[
xmap хх [[
omap хх [[
nmap хЗ [P
xmap хЗ [P
omap хЗ [P
nmap хШ [I
xmap хШ [I
omap хШ [I
nmap хВ [D
xmap хВ [D
omap хВ [D
nmap хё [`
xmap хё [`
omap хё [`
nmap хэ ['
xmap хэ ['
omap хэ ['
nmap эЪ '}
xmap эЪ '}
omap эЪ '}
nmap эХ '{
xmap эХ '{
omap эХ '{
nmap эъ ']
xmap эъ ']
omap эъ ']
nmap эх '[
xmap эх '[
omap эх '[
nmap эЮ '>
xmap эЮ '>
omap эЮ '>
nmap эБ '<
xmap эБ '<
omap эБ '<
nmap ээ ''
xmap ээ ''
omap ээ ''
nmap ёЪ `}
xmap ёЪ `}
omap ёЪ `}
nmap ёХ `{
xmap ёХ `{
omap ёХ `{
nmap ёъ `]
xmap ёъ `]
omap ёъ `]
nmap ёх `[
xmap ёх `[
omap ёх `[
nmap ёЮ `>
xmap ёЮ `>
omap ёЮ `>
nmap ёБ `<
xmap ёБ `<
omap ёБ `<
nmap ёё ``
xmap ёё ``
omap ёё ``
nmap ю .
xmap ю .
omap ю .
nmap ь m
xmap ь m
omap ь m
nmap т n
xmap т n
omap т n
nmap с c
xmap с c
omap с c
nmap ч x
xmap ч x
omap ч x
nmap я z
xmap я z
omap я z
nmap є '
xmap є '
omap є '
nmap э '
xmap э '
omap э '
nmap р h
xmap р h
omap р h
nmap і s
xmap і s
omap і s
nmap ы s
xmap ы s
omap ы s
nmap ф a
xmap ф a
omap ф a
nmap ї ]
xmap ї ]
omap ї ]
nmap ъ ]
xmap ъ ]
omap ъ ]
nmap х [
xmap х [
omap х [
nmap щ o
xmap щ o
omap щ o
nmap ш i
xmap ш i
omap ш i
nmap у e
xmap у e
omap у e
nmap ц w
xmap ц w
omap ц w
nmap ё `
xmap ё `
omap ё `
cnoremap <expr> [ loupe#private#very_magic_slash('[')
imap \ihn :IHN
imap \is :IHS:A
imap \ih :IHS
cnoremap <expr> ] loupe#private#very_magic_slash(']')
cnoremap <expr> ^ loupe#private#very_magic_slash('^')
cnoremap <expr> _ loupe#private#very_magic_slash('_')
cnoremap <expr> ` loupe#private#very_magic_slash('`')
nmap ’ `
xmap ’ `
omap ’ `
inoremap jj :w
cnoremap <expr> { loupe#private#very_magic_slash('{')
cnoremap <expr> } loupe#private#very_magic_slash('}')
cnoremap <expr> ~ loupe#private#very_magic_slash('~')
cabbr <expr> цй getcmdtype()==':' && getcmdline()=="цй"	? "wq"	: "цй"
cabbr <expr> ц getcmdtype()==':' && getcmdline()=="ц"	? "w"	: "ц"
cabbr <expr> йф getcmdtype()==':' && getcmdline()=="йф"	? "qa"	: "йф"
cabbr <expr> й getcmdtype()==':' && getcmdline()=="й"	? "q"	: "й"
cabbr <expr> ит getcmdtype()==':' && getcmdline()=="ит"	? "bn"	: "ит"
cabbr <expr> ив getcmdtype()==':' && getcmdline()=="ив"	? "bd"	: "ив"
let &cpo=s:cpo_save
unlet s:cpo_save
set autoread
set background=dark
set backspace=indent,eol,start
set comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
set completefunc=youcompleteme#Complete
set completeopt=menuone,preview
set cpoptions=aAceFs$B
set directory=~/.vim/tmp//,.
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set gdefault
set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 12
set guioptions=gita
set helplang=en
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set nomore
set mouse=a
set omnifunc=youcompleteme#OmniComplete
set operatorfunc=TCommentOpFunc_gcc
set ruler
set runtimepath=~/.vim,~/.vim/plugged/vim-nerdtree-tabs/,~/.vim/plugged/vim-fugitive/,~/.vim/plugged/numbers.vim/,~/.vim/plugged/taglist.vim/,~/.vim/plugged/tComment/,~/.vim/plugged/vim-surround/,~/.vim/plugged/vim-abolish/,~/.vim/plugged/vim-repeat/,~/.vim/plugged/vim-airline-themes/,~/.vim/plugged/vim-airline/,~/.vim/plugged/vim-easymotion/,~/.vim/plugged/syntastic/,~/.vim/plugged/ack.vim/,~/.vim/plugged/tabular/,~/.vim/plugged/unite-colorscheme/,~/.vim/plugged/unite.vim/,~/.vim/plugged/vimproc.vim/,~/.vim/plugged/jedi-vim/,~/.vim/plugged/YouCompleteMe/,~/.vim/plugged/vim-addon-mw-utils/,~/.vim/plugged/tlib_vim/,~/.vim/plugged/ultisnips/,~/.vim/plugged/vim-snippets/,~/.vim/plugged/vim-unimpaired/,~/.vim/plugged/vim-colors-solarized/,~/.vim/plugged/base16-vim/,~/.vim/plugged/vim-colorschemes/,~/.vim/plugged/oceanic-next/,~/.vim/plugged/git-vim/,~/.vim/plugged/vim-rooter/,~/.vim/plugged/vim-easytags/,~/.vim/plugged/vim-misc/,~/.vim/plugged/vim-gencode-cpp/,~/.vim/plugged/a.vim/,~/.vim/plugged/ctrlsf.vim/,~/.vim/plugged/vim-esearch/,~/.vim/plugged/tagbar/,~/.vim/plugged/vim-tmux-navigator/,~/.vim/plugged/vim-multiple-cursors/,~/.vim/plugged/vim-over/,~/.vim/plugged/rainbow/,~/.vim/plugged/delimitMate/,~/.vim/plugged/vim-gitgutter/,~/.vim/plugged/vim-clang-format/,~/.vim/plugged/vim-plugin-ruscmd/,~/.vim/plugged/vim-trailing-whitespace/,~/.vim/plugged/vim-dispatch/,~/.vim/plugged/nerdcommenter/,~/.vim/plugged/STL-Syntax/,~/.vim/plugged/terminus/,~/.vim/plugged/loupe/,~/.vim/plugged/vim-move/,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vim74/pack/dist/opt/matchit,/usr/share/vim/vimfiles/after,~/.vim/plugged/tabular/after,~/.vim/plugged/jedi-vim/after,~/.vim/plugged/ultisnips/after,~/.vim/plugged/ctrlsf.vim/after,~/.vim/plugged/STL-Syntax/after,~/.vim/after
set scrolloff=3
set shiftwidth=4
set shortmess=filnxtToOsc
set showcmd
set noshowmode
set showtabline=2
set smartcase
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg
set tabline=%!airline#extensions#tabline#get()
set tabstop=4
set tags=./tags,./TAGS,tags,TAGS,~/.vimtags
set termencoding=utf-8
set title
set ttimeoutlen=50
set updatetime=2000
set visualbell
set wildmenu
set wildmode=list:longest
set window=24
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Projects/pomodoro_cpp
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +150 core/tests/test_datetime.cpp
badd +143 core/src/DateTime.cpp
badd +119 core/include/core/DateTime.h
badd +103 qt_gui/src/models/TaskModel.cpp
badd +43 qt_gui/src/models/SprintModel.cpp
badd +23 qt_gui/src/widgets/HistoryWindow.cpp
badd +59 qt_gui/src/widgets/HistoryWindow.h
badd +49 core/src/StringUtils.cpp
badd +80 core/include/core/StringUtils.h
badd +93 core/tests/test_string_utils.cpp
argglobal
silent! argdel *
edit core/tests/test_datetime.cpp
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 93 + 95) / 191)
exe '2resize ' . ((&lines * 23 + 25) / 50)
exe 'vert 2resize ' . ((&columns * 97 + 95) / 191)
exe '3resize ' . ((&lines * 23 + 25) / 50)
exe 'vert 3resize ' . ((&columns * 97 + 95) / 191)
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <S-BS> <Plug>delimitMateS-BS
imap <buffer> <BS> <Plug>delimitMateBS
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer>  <Plug>delimitMateBS
imap <buffer>  <Plug>delimitMateCR
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
imap <buffer> } <Plug>delimitMate}
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=youcompleteme#OmniComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp'
setlocal syntax=cpp
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 176 - ((31 * winheight(0) + 23) / 47)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
176
normal! 047|
wincmd w
argglobal
edit core/src/DateTime.cpp
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <S-BS> <Plug>delimitMateS-BS
imap <buffer> <BS> <Plug>delimitMateBS
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer>  <Plug>delimitMateBS
imap <buffer>  <Plug>delimitMateCR
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
imap <buffer> } <Plug>delimitMate}
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=youcompleteme#OmniComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(2)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp'
setlocal syntax=cpp
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 192 - ((11 * winheight(0) + 11) / 23)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
192
normal! 09|
wincmd w
argglobal
edit core/include/core/DateTime.h
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <S-BS> <Plug>delimitMateS-BS
imap <buffer> <BS> <Plug>delimitMateBS
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer>  <Plug>delimitMateBS
imap <buffer>  <Plug>delimitMateCR
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
imap <buffer> } <Plug>delimitMate}
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=youcompleteme#OmniComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(3)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp'
setlocal syntax=cpp
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 128 - ((14 * winheight(0) + 11) / 23)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
128
normal! 0
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 93 + 95) / 191)
exe '2resize ' . ((&lines * 23 + 25) / 50)
exe 'vert 2resize ' . ((&columns * 97 + 95) / 191)
exe '3resize ' . ((&lines * 23 + 25) / 50)
exe 'vert 3resize ' . ((&columns * 97 + 95) / 191)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOsc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
