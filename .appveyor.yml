version: "{build}"

image: Visual Studio 2019

# init:
#     - git config --global core.autocrlf input

clone_folder: c:\projects\sprint_timer
shallow_clone: true              # only last commit without history

matrix:
    fast_finish: false           # don't stop on error in some build

platform:
    - x64

configuration:
    - Debug
    - Release

# environment:
#     matrix:
#         - TOOLCHAIN: msvc15

# install:
#     - call ci\appveyor\set-env.bat %TOOLCHAIN% %PLATFORM%

build: off

before_build:
    - set QTDIR=C:\Qt\5.15\msvc2017_64
    - set DEBUG_BIN_DIR=C:\projects\sprint_timer\build\x64_Debug\bin
    - set RELEASE_BIN_DIR=C:\projects\sprint_timer\build\x64_Release\bin

build_script:
    - mkdir build
    - cd build
    - cmake .. -G "Visual Studio 16 2019" -A x64 -DCMAKE_VERBOSE_MAKEFILE="OFF" -DCMAKE_PREFIX_PATH="C:/Qt/5.15/msvc2017_64/lib/cmake" -DCMAKE_INCLUDE_PATH="C:\Libraries\boost_1_71_0" -DWARNINGS_AS_ERRORS=False -DENABLE_TESTING=ON -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE -DBUILD_SHARED_LIBS=TRUE -DCMAKE_INSTALL_PREFIX="C:/sprint_timer_bin"
    - mkdir C:\projects\sprint_timer\build\x64_Debug\bin
    - mkdir C:\projects\sprint_timer\build\x64_Release\bin
    - copy %QTDIR%\bin\Qt5Core.dll RELEASE_BIN_DIR
    - copy %QTDIR%\bin\Qt5Gui.dll RELEASE_BIN_DIR
    - copy %QTDIR%\bin\Qt5Multimedia.dll RELEASE_BIN_DIR
    - copy %QTDIR%\bin\Qt5Network.dll RELEASE_BIN_DIR
    - copy %QTDIR%\bin\Qt5Sql.dll RELEASE_BIN_DIR
    - copy %QTDIR%\bin\Qt5Widgets.dll RELEASE_BIN_DIR
    - copy %QTDIR%\bin\Qt5Cored.dll DEBUG_BIN_DIR
    - copy %QTDIR%\bin\Qt5Guid.dll DEBUG_BIN_DIR
    - copy %QTDIR%\bin\Qt5Multimediad.dll DEBUG_BIN_DIR
    - copy %QTDIR%\bin\Qt5Networkd.dll DEBUG_BIN_DIR
    - copy %QTDIR%\bin\Qt5Sqld.dll DEBUG_BIN_DIR
    - copy %QTDIR%\bin\Qt5Widgetsd.dll DEBUG_BIN_DIR
    - cmake --build . --config %configuration%

test_script:
    - ctest

# artifacts:
#     - path: <local-package-path>
#       name: package_name
#
# deploy:
#     # publish tagged commits on GitHub Releases:
#     description: '$(APPVEYOR_REPO_TAG_NAME)'
#     provider: GitHub
#
#     auth_token:
#         secure: <encrypted-github-token>
#
#     artifact: package_name
#     force_update: true
#
#     on:
#         appveyor_repo_tag: true
